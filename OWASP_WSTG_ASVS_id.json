[
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/01-Conduct_Search_Engine_Discovery_Reconnaissance_for_Information_Leakage"
        ],
        "locale": "en",
        "title": "Disclosure of sensitive information indexed in web search engines or other public sources",
        "vulnType": "OWASP WSTG",
        "description": "<p>Mesin pencari dapat digunakan untuk melakukan pengakuan situs web dan aplikasi. Ada elemen langsung dan tidak langsung untuk penemuan dan pengakuan mesin pencari: Metode langsung terkait dengan mencari indeks dan konten terkait cache, sementara metode tidak langsung terkait dengan informasi yang sensitif belajar tentang tata letak dan konfigurasi dengan mencari di forum, newsgroup, dan situs web.</p><p>Dengan menggunakan mesin pencari seperti Google, Duckduckgo atau Bing, dimungkinkan untuk menemukan informasi yang berpotensi sensitif seperti:</p><ul><li><p>Diagram dan konfigurasi jaringan.</p></li><li><p>Pesan dan email yang diarsipkan dari administrator atau personel kunci lainnya.</p></li><li><p>Prosedur Login dan Format Nama Pengguna.</p></li><li><p>Nama pengguna, kata sandi, dan kunci pribadi.</p></li><li><p>File konfigurasi dari pihak ketiga atau layanan cloud.</p></li><li><p>Konten mengungkapkan pesan kesalahan.</p></li><li><p>Versi pengembangan, tes, tes penerimaan pengguna (UAT) dan versi pengujian aplikasi.</p></li></ul>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Sebelum menerbitkan aplikasi, penting untuk mempertimbangkan sensitivitas data yang terpapar di dalamnya untuk mencegah pengungkapan informasi sensitif yang tidak disengaja.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
          "https://cwe.mitre.org/data/definitions/200.html",
          "https://wiki.owasp.org/index.php/Testing_for_Web_Application_Fingerprint_(OWASP-IG-004)"
        ],
        "locale": "en",
        "title": "Disclosure of sensitive information in HTTP headers",
        "vulnType": "OWASP WSTG",
        "description": "<p>Situasi ini terjadi ketika aplikasi mengungkapkan jenis dan/atau versi komponen internal yang digunakan dengan mengungkapkan informasi di header protokol HTTP. Melalui informasi ini, sistem operasi, salah satu layanannya (web, surat, transfer file ...), atau salah satu komponennya (PHP, mod_proxy, webdav ...) dapat diungkapkan.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Untuk mencegah pengungkapan informasi semacam ini, perlu untuk menyembunyikan informasi yang ditampilkan di header protokol. Untuk mencegah pengungkapan informasi semacam ini, perlu untuk menyembunyikan informasi yang ditampilkan di header protokol.</p><p>Sebuah perbaikan, yang biasanya merupakan pembaruan untuk itu atau penerapan tambalan tertentu, biasanya diperlukan untuk memperbaiki kerentanan yang diterbitkan dari komponen yang terdeteksi dan membutuhkan pengabaian terhadap rekomendasi pembuat perangkat lunak yang rentan untuk menyelesaikan kerentanan.</p><p>Perlu untuk memutuskan apakah akan berhenti menawarkan layanan sampai solusi ditemukan atau mengambil kesempatan untuk melakukannya bahkan tanpa adanya solusi yang diterbitkan.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework"
        ],
        "locale": "en",
        "title": "Disclosure of sensitive information in application cookies",
        "vulnType": "OWASP WSTG",
        "description": "<p>Konfigurasi cookie memperlihatkan informasi sensitif baik dalam nama cookie yang telah ditetapkan sebelumnya dan isinya, yang mengarah pada kerentanan ini. Misalnya, cookie dengan nama perangkat lunak yang dibuat dengan.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Untuk mencegah pengungkapan informasi semacam ini, perlu menyembunyikan data yang ditampilkan dalam cookie atau mengubah nama atau kontennya.</p><p>Untuk memperbaiki kerentanan yang diungkapkan secara publik dari komponen yang terdeteksi, biasanya perlu untuk mengikuti rekomendasi pabrikan untuk menyelesaikan kerentanan, solusi yang biasanya memerlukan pembaruan perangkat lunak atau penerapan tambalan tertentu.</p><p>Perlu untuk memutuskan apakah akan berhenti menawarkan layanan sampai solusi ditemukan atau mengambil kesempatan untuk melakukannya bahkan tanpa adanya solusi yang diterbitkan.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/200.html",
          "https://developers.google.com/search/docs/advanced/robots/intro"
        ],
        "locale": "en",
        "title": "Disclosure of sensitive information in the 'robots.txt' file",
        "vulnType": "OWASP WSTG",
        "description": "<p>Beberapa program menggunakan bot laba -laba untuk secara otomatis menelusuri situs web dalam upaya mengindeksnya. Setiap pengguna dapat mengakses file \"robots.txt\", yang digunakan untuk menentukan direktori dan sumber daya yang ingin diindeks oleh administrator dan yang tidak. Konfigurasi file ini perlu ditangani dengan sangat hati -hati karena dapat mengungkapkan sumber daya mana yang sensitif.</p><p>File \"Robots.txt\" berisi sumber daya sensitif yang dapat digunakan oleh penyerang untuk meluncurkan serangan yang lebih canggih dan tepat menggunakan data yang dikumpulkan.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>File 'Robots.txt' tidak boleh digunakan sebagai metode membatasi akses ke area tidak aman aplikasi. Di luar perlindungan mereka dari robot tipe laba-laba, akses ke bagian-bagian ini harus dikontrol dengan benar terhadap potensi serangan.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/200.html"
        ],
        "locale": "en",
        "title": "Disclosure of sensitive information in the 'sitemap.xml' file",
        "vulnType": "OWASP WSTG",
        "description": "<p>Pengembang atau organisasi dapat memberikan perincian tentang sumber daya yang tersedia dalam aplikasi dan koneksi mereka dalam file \"Sitemap.xml\".</p><p>File \"sitemap.xml\" berisi sumber daya sensitif yang dapat digunakan oleh penyerang untuk meluncurkan serangan yang lebih maju dan tepat menggunakan data yang telah mereka kumpulkan.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Disarankan untuk menghapus data sensitif apa pun dari file \"sitemap.xml\" yang tidak diperlukan untuk pengembangan aplikasi.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/200.html"
        ],
        "locale": "en",
        "title": "Disclosure of sensitive information in the 'security.txt' file",
        "vulnType": "OWASP WSTG",
        "description": "<p>Standar yang diusulkan memungkinkan halaman web untuk menentukan kebijakan keamanan dan informasi kontak dalam file \"Security.txt\".</p><p>File \"Security.txt\" berisi informasi sensitif yang dapat digunakan oleh penyerang untuk meluncurkan serangan yang lebih canggih dan tepat menggunakan data yang dikumpulkan.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Disarankan untuk menghapus semua data pribadi dari file \"Security.txt\" yang tidak diperlukan untuk pengembangan aplikasi.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/200.html"
        ],
        "locale": "en",
        "title": "Disclosure of sensitive information in the 'humans.txt' file",
        "vulnType": "OWASP WSTG",
        "description": "<p>File \"Humans.txt\" adalah proyek untuk mempelajari lebih lanjut tentang orang -orang yang membuat situs web.</p><p>File \"Humans.txt\" berisi informasi sensitif yang dapat digunakan oleh penyerang untuk meluncurkan serangan yang lebih canggih dan tepat menggunakan data yang dikumpulkan.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Disarankan untuk menghapus semua data pribadi dari file \"Humans.txt\" yang tidak diperlukan untuk pengembangan aplikasi.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/540.html"
        ],
        "locale": "en",
        "title": "Disclosure of sensitive information in the source code",
        "vulnType": "OWASP WSTG",
        "description": "<p>Situasi ini muncul ketika menganalisis file yang telah diunggah ke server web mengungkapkan informasi terkait server yang dapat digunakan untuk merencanakan serangan baru, seperti jenis dan versi aplikasi yang digunakan, komponen atau ekstensi yang sedang digunakan, kredensial ...</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Untuk mencegah kebocoran informasi sensitif, kode sumber HTML yang dikirim server harus dimodifikasi.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/497.html"
        ],
        "locale": "en",
        "title": "Disclosure of sensitive information because debug mode is enabled",
        "vulnType": "OWASP WSTG",
        "description": "<p>Kadang -kadang dimungkinkan untuk menampilkan data teknis atau rahasia dagang dalam aplikasi dengan menggunakan \"parameter debug yang memungkinkan.\" Akibatnya, penyerang meningkatkan ukuran permukaan serangannya dengan mempelajari lebih lanjut tentang cara kerja aplikasi. Mengaktifkan bendera debug kadang -kadang bahkan menghasilkan serangan eksekusi kode (versi Werkzeug yang lebih lama)</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Aplikasi produksi tidak boleh menghasilkan informasi internal seperti jejak tumpukan dan pesan kesalahan kecuali mereka secara langsung berkomitmen pada log yang tidak dapat dilihat oleh pengguna akhir. Sebelum ditulis ke file log, semua teks pesan kesalahan harus html entitas yang dikodekan untuk mencegah serangan scripting lintas situs potensial terhadap penampil log.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/200.html"
        ],
        "locale": "en",
        "title": "Disclosure of sensitive information (generic)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Kata sandi, misalnya, adalah informasi sensitif yang dapat berharga sendiri atau digunakan untuk meluncurkan serangan lain yang lebih serius (seperti mendapatkan pesan kesalahan yang tidak terkendali). Konten pesan kesalahan dapat digunakan oleh penyerang untuk mendukung peluncuran serangan yang berbeda dan lebih terfokus. Upaya untuk mengeksploitasi pencacahan direktori atau cacat traversal jalur, misalnya, dapat mengungkapkan jalur lengkap ke aplikasi yang diinstal.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Buat area \"aman\" dalam sistem di mana batas kepercayaan dapat didefinisikan dengan jelas. Izinkan tidak ada informasi sensitif untuk melewati garis kepercayaan, dan berhati -hati setiap kali berinteraksi dengan kompartemen di luar area yang aman.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/200.html",
          "https://cwe.mitre.org/data/definitions/359.html"
        ],
        "locale": "en",
        "title": "Disclosure of credentials (credentials leak)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Dimungkinkan untuk memverifikasi dan memeriksa keberadaan file yang berisi informasi sensitif, seperti kredensial yang valid untuk mengakses sistem lain, pada berbagai titik akhir. Tidak perlu untuk segala jenis cookie atau sistem otentikasi sebelumnya untuk mengakses kredensial ini.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Terlepas dari perangkat lunak yang digunakan kredensial pengguna ini, tidak pernah disarankan untuk mengekspos file sensitif yang mengekspos kredensial pengguna.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/798.html"
        ],
        "locale": "en",
        "title": "Use of Hard-coded Credentials",
        "vulnType": "OWASP WSTG",
        "description": "<p>Untuk enkripsi data internalnya sendiri, komunikasi keluar dengan komponen eksternal, dan otentikasi masuk, perangkat lunak memiliki kredensial kode keras, seperti kata sandi atau kunci kriptografi. Kredensial berkode keras sering menghasilkan kesenjangan keamanan yang cukup besar yang memungkinkan penyerang untuk menyiasati pengaturan otentikasi yang telah diatur oleh administrator perangkat lunak.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Bypass Protection Mechanism: Jika kata sandi kode keras digunakan, hampir pasti bahwa pengguna jahat akan mendapatkan akses ke akun yang dimaksud.</p></li><li><p>Kontrol Akses: Jalankan kode atau perintah yang tidak sah: Kelemahan ini dapat menyebabkan paparan sumber daya atau fungsionalitas kepada aktor yang tidak diinginkan, mungkin memberikan informasi sensitif kepada penyerang atau bahkan menjalankan kode sewenang -wenang.</p></li></ul>",
        "remediation": "<p>Alih -alih rahasia dan kunci API statis, gunakan token sesi.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
          "https://cwe.mitre.org/data/definitions/200.html",
          "https://capec.mitre.org/data/definitions/118.html"
        ],
        "locale": "en",
        "title": "Disclosure of sensitive information in the metadata of files available in the application",
        "vulnType": "OWASP WSTG",
        "description": "<p>Istilah \"metadata\" mengacu pada informasi tentang dokumen yang terutama bersifat deskriptif. Informasi tentang administrasi dan manajemen juga dapat dimasukkan.</p><p>Kumpulan data yang mencirikan atau mendefinisikan informasi tertentu yang ditautkannya dikenal sebagai metadata. Dengan meningkatkan informasi yang ditautkannya, metadata membuat interpretasi komputer tentang informasi itu jauh lebih menyeluruh dan meningkatkan pengambilan dokumen.</p><p>Melalui metadata, mereka telah ditemukan telah digunakan untuk mengekstraksi informasi yang sensitif.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Disarankan bahwa semua file yang tersedia dalam aplikasi harus menghapus metadata mereka sebelum dapat diakses ke jaringan untuk mengatasi kerentanan ini.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework"
        ],
        "locale": "en",
        "title": "Disclosure of sensitive information in default content",
        "vulnType": "OWASP WSTG",
        "description": "<p>Ini terjadi ketika file default dibiarkan terbuka setelah instalasi layanan atau aplikasi. Karena jenis informasi yang mereka ungkapkan, seperti jenis dan versi server web yang digunakan, keberadaan file default pada server web menimbulkan ancaman.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Untuk memperbaikinya, semua file default yang tidak diperlukan untuk operasi server harus dihapus, termasuk halaman default yang diinstal setelah server.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver",
          "https://cwe.mitre.org/data/definitions/538.html",
          "https://www.owasp.org/index.php/Full_Path_Disclosure"
        ],
        "locale": "en",
        "title": "Disclosure of internal server paths and directories",
        "vulnType": "OWASP WSTG",
        "description": "<p>Fakta ini muncul setiap kali jalur absolut dari server web atau aplikasi yang dihosting di atasnya dapat ditentukan menggunakan mekanisme apa pun, seperti dengan mengirim pesan kesalahan, melacak pengiriman parameter, dll.</p><p>Direktori absolut server, di mana konten web disimpan, dapat ditemukan.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Bergantung pada jenis kelemahan yang menyebabkan pengungkapan, tindakan terbaik akan bervariasi. Jika diperoleh mengikuti pesan kesalahan, penting untuk menukar pesan kesalahan server ini dengan pesan umum yang hanya melaporkan situasi yang tidak normal tanpa membahas lebih lanjut mengenai penyebabnya. Penting untuk mengubah logika aplikasi sehingga hanya jalur relatif yang ditampilkan atau tidak sama sekali jika jalur itu telah dipublikasikan oleh parameter aplikasi.</p><p>Disarankan untuk menukar pesan kesalahan server dengan pesan umum yang hanya menyatakan bahwa ada sesuatu yang abnormal tanpa membahas lebih lanjut mengapa.</p><p>File konfigurasi harus digunakan untuk mencapai ini.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Information Gathering",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver",
          "https://cwe.mitre.org/data/definitions/548.html"
        ],
        "locale": "en",
        "title": "Directory listing",
        "vulnType": "OWASP WSTG",
        "description": "<p>Daftar Direktori adalah fitur yang, ketika diaktifkan, menyebabkan server web untuk mendaftar konten direktori ketika tidak ada file indeks (misalnya index.php atau index.html) hadir. Oleh karena itu, jika suatu permintaan dibuat ke direktori di mana daftar direktori diaktifkan, dan tidak ada file indeks, bahkan jika ada file dari aplikasi web, server web mengirimkan daftar direktori sebagai respons.</p><p>Ketika ini terjadi ada masalah kebocoran data, dan penyerang dapat menggunakan data ini untuk membangun serangan lain, termasuk kerentanan hit langsung seperti XSS. Ini dapat berguna dalam lingkungan pengembangan tetapi bukan praktik yang baik untuk server produksi.</p><p>Fakta bahwa server web memungkinkan daftar direktori memiliki beberapa implikasi keamanan:</p><ul><li><p>Memungkinkan pengguna untuk mengunduh file tertentu atau mengakses direktori tertentu yang tidak mungkin dilakukan.</p></li><li><p>Ini dapat menampilkan informasi yang membantu penyerang mengetahui detail teknis tentang server web.</p></li><li><p>Menampilkan semua konten direktori, tanpa membedakan antara file yang dapat bersifat publik, dan yang harus tetap pribadi.</p></li></ul><p>Ini sering tidak disengaja, karena server web default menampilkan daftar direktori jika file indeks tidak valid atau tidak ada.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca file atau direktori: Mengekspos konten direktori dapat menyebabkan penyerang mendapatkan akses ke kode sumber atau memberikan informasi yang berguna bagi penyerang untuk menyusun eksploitasi, seperti waktu pembuatan file atau informasi apa pun yang dapat dikodekan dalam nama file. Daftar direktori juga dapat membahayakan data pribadi atau rahasia.</p></li></ul>",
        "remediation": "<p>Konfigurasikan dengan benar. Server web, apakah Nginx, Apache, atau IIS, harus diatur sehingga tidak ada daftar direktori maupun navigasi pengguna melalui jalur diizinkan. Untuk contoh, pada server web Apache, Anda perlu membuat file. HtAccess yang sesuai untuk menonaktifkan daftar direktori. Baris -baris berikut dapat ditambahkan ke file httpd.conf atau ditukar dengan yang sudah ada:</p><p><directory directory}=\"\" {your=\"\">Opsi mengikuti tautan</directory></p><p>Seperti yang dapat Anda lihat dari kode sampel di atas, untuk menonaktifkan fitur daftar direktori dengan aman di server web Apache, Anda harus menghapus pernyataan indeks dan multiviews.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption",
          "https://cwe.mitre.org/data/definitions/311.html",
          "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html",
          "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
          "https://wiki.owasp.org/index.php/Testing_for_Weak_SSL/TLS_Ciphers,_Insufficient_Transport_Layer_Protection_(OTG-CRYPST-001)"
        ],
        "locale": "en",
        "title": "Absence of SSL/TLS encryption",
        "vulnType": "OWASP WSTG",
        "description": "<p>Alih -alih protokol HTTPS, HTTP digunakan untuk berkomunikasi dengan server web. Untuk menghentikan penyerang dari membaca atau mengubah data yang dikirim antara klien dan server, itu harus dienkripsi dan dilindungi. Metode yang paling umum untuk melakukan ini adalah melalui HTTPS, yang menggantikan protokol Secure Socket Layer (SSL) untuk protokol Lapisan Keamanan Transportasi (TLS). Dengan menampilkan sertifikat digital tepercaya, server dapat menggunakan TLS untuk menunjukkan kepada klien bahwa itu terhubung ke server yang tepat.</p><p>Selama bertahun -tahun, sejumlah besar kelemahan kriptografi telah diidentifikasi dalam protokol SSL dan TLS, serta di sandi yang mereka gunakan. Selain itu, banyak implementasi protokol ini juga memiliki kerentanan yang serius. Oleh karena itu, penting untuk memeriksa bahwa situs tidak hanya menerapkan TLS, tetapi mereka melakukannya dengan cara yang aman.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat mendekripsi data menggunakan serangan brute force.</p></li></ul>",
        "remediation": "<p>Server web harus dikonfigurasi untuk mendukung HTTPS. Selain itu, praktis untuk menggunakan header HSTS dan beralih semua permintaan HTTP ke protokol HTTPS.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels",
          "https://cwe.mitre.org/data/definitions/16.html",
          "https://cwe.mitre.org/data/definitions/319.html",
          "https://capec.mitre.org/data/definitions/117.html"
        ],
        "locale": "en",
        "title": "Mixed content",
        "vulnType": "OWASP WSTG",
        "description": "<p>Konten yang diunggah menggunakan protokol HTTP digunakan oleh aplikasi web, yang menggunakan protokol HTTPS. Karena setiap data yang diunggah melalui HTTP dapat dicegat dan diubah oleh penyerang, praktik ini dianggap tidak mencukupi.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Server web harus dikonfigurasi untuk mendukung HTTPS. Selain itu, praktis untuk menggunakan header HSTS dan beralih semua permintaan HTTP ke protokol HTTPS.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption",
          "https://cwe.mitre.org/data/definitions/310.html",
          "https://cwe.mitre.org/data/definitions/327.html"
        ],
        "locale": "en",
        "title": "Weak Encryption algorithms",
        "vulnType": "OWASP WSTG",
        "description": "<p>Sejumlah kelemahan dalam konfigurasi server web dari layanan SSL/TLS dapat menyebabkan komunikasi yang tidak aman antara klien dan server.</p><p>Algoritma enkripsi yang digunakan oleh layanan SSL/TLS yang berjalan di server dianggap lemah atau memiliki kerentanan yang diketahui.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li><li><p>Kontrol Akses: Modifikasi Data Aplikasi: Penyerang dapat menipu pengguna untuk melakukan tindakan yang bertopeng dan disembunyikan dari tampilan pengguna. Dampaknya sangat bervariasi, tergantung pada fungsionalitas aplikasi yang mendasarinya. Misalnya, dalam aplikasi media sosial, clickjacking dapat digunakan untuk Trik pengguna agar mengubah pengaturan privasi.</p></li></ul>",
        "remediation": "<p>Izinkan hanya koneksi TLS dengan enkripsi yang dianggap aman dalam versi 1.2 atau 1.3.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
          "https://cwe.mitre.org/data/definitions/326.html"
        ],
        "locale": "en",
        "title": "Use of Obsolete SSL/TLS Protocol Versions",
        "vulnType": "OWASP WSTG",
        "description": "<p>Untuk menghentikan penyerang dari membaca atau mengubah data yang dikirim antara klien dan server, itu harus dienkripsi dan dilindungi. Metode yang paling populer untuk melakukan ini adalah HTTPS, yang menggantikan protokol Secure Socket Layer (SSL) yang sudah ketinggalan zaman dengan protokol Lapisan Transport Security (TLS). Dengan menampilkan sertifikat digital tepercaya, server dapat menggunakan TLS untuk menunjukkan kepada klien bahwa itu terhubung ke server yang tepat.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Di server web, varian tidak aman dari protokol SSL/TLS harus dinonaktifkan.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security"
        ],
        "locale": "en",
        "title": "Secure Client-Initiated Renegotiation",
        "vulnType": "OWASP WSTG",
        "description": "<p>Di sisi server dibandingkan dengan sisi klien, lebih banyak sumber daya digunakan selama negosiasi koneksi SSL/TLS. Jika server mengizinkan klien untuk meminta negosiasi ulang koneksi, penyerang mungkin memanfaatkan fitur ini untuk mengirimkan banyak permintaan negosiasi, menggunakan sumber daya server dan mungkin menghasilkan penolakan layanan (DOS).</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Untuk mengatasi kerentanan, disarankan untuk menerapkan tambalan terbaru. Sangat penting untuk memperbarui ke versi 0.9.8L atau lebih baru pada sistem yang menjalankan OpenSSL. Di sisi lain, juga dimungkinkan untuk menonaktifkan inisiasi negosiasi ulang klien sebagai mitigasi tanpa perlu pembaruan.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption",
          "https://cwe.mitre.org/data/definitions/16.html"
        ],
        "locale": "en",
        "title": "Untrusted Digital Certificate",
        "vulnType": "OWASP WSTG",
        "description": "<p>Sertifikat digital server tidak aman dan tidak dapat diandalkan karena beberapa parameter yang salah, yang meningkatkan risiko kerahasiaan atau ketergantungan terhadap sistem.</p>",
        "observation": "<ul><li><p>Lainnya: Dampak Teknis: Bervariasi berdasarkan Konteks</p></li></ul>",
        "remediation": "<p>Disarankan untuk membuat sertifikat digital yang diakui browser sebagai dapat diandalkan (dikeluarkan oleh otoritas yang diakui, dalam periode validitas dan dengan nama umum sertifikat yang sama dengan nama situs web yang menawarkan layanan).</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/299.html"
        ],
        "locale": "en",
        "title": "Improper check for certificate revocation (OCSP Stapling)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Untuk menghentikan serangan man-in-the-middle pada pengguna aplikasi Anda, Anda harus selalu dapat dengan cepat mengingat sertifikat ini kapan pun otoritas sertifikat Anda kehilangan kepercayaan.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Kepercayaan dapat ditugaskan ke entitas yang tidak diklaimnya.</p></li><li><p>Lainnya: Lainnya: Data dari sumber yang tidak dipercaya (dan mungkin jahat) dapat diintegrasikan.</p></li><li><p>Kerahasiaan: Baca Data Aplikasi: Data dapat diungkapkan kepada entitas yang menyamar sebagai entitas tepercaya, menghasilkan pengungkapan informasi.</p></li></ul>",
        "remediation": "<p>File Keyset pada komputer penandatanganan aman, yang juga merupakan tempat salinan zona yang ditandatangani dan tidak ditandatangani disimpan, berisi jangkar kepercayaan untuk zona yang diberikan. Prosedur penandatanganan mencakup pembuatan otomatis file ini.</p><p>Daftar Pencabutan Sertifikat (CRL) adalah daftar, dibuat dan ditandatangani oleh Otoritas Sertifikat (CA), yang berisi jumlah serial sertifikat yang telah dikeluarkan oleh CA itu dan saat ini dicabut. Selain nomor seri sertifikasi yang dicabut, CRL juga berisi alasan pencabutan untuk setiap sertifikat dan waktu sertifikat dicabut. Nomor seri untuk setiap sertifikat yang dicabut disimpan dalam database CAS dan diterbitkan dalam CRL sampai sertifikat berakhir.</p><p>Entri CRL untuk sertifikat yang dicabut dihapus setelah kedaluwarsa, dan CA kemudian bebas untuk menghapus sertifikat dari basis data. Sertifikat yang dicabut biasanya tetap ada di CRL untuk satu periode publikasi setelah berakhirnya sertifikat. Anda harus selalu memiliki akses ke pengetahuan ini sehingga Anda dapat bertindak dengan cepat.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "SSL/TLS encryption",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/299.html"
        ],
        "locale": "en",
        "title": "CA certificates",
        "vulnType": "OWASP WSTG",
        "description": "<p>Sebuah organisasi yang mengeluarkan sertifikat digital dikenal sebagai Otoritas Sertifikat (CA) di bidang kriptografi. Sertifikat digital membuktikan subjek yang disebutkan dari kepemilikan sertifikat kunci publik. CA kadang -kadang dapat gagal dan dihapus dari browser. Jika aplikasi Anda menggunakan sertifikat yang dikeluarkan oleh CA ini, ini akan menghasilkan koneksi TLS yang tidak dipercaya.</p><p>Sertifikat identitas yang ditandatangani oleh entitas yang sama yang identitasnya disertifikasi dikenal sebagai sertifikat yang ditandatangani sendiri. Ungkapan ini tidak ada hubungannya dengan siapa atau apa yang bertanggung jawab untuk melaksanakan proses penandatanganan. Sertifikat yang ditandatangani sendiri adalah sertifikat yang ditandatangani menggunakan kunci pribadi milik penerbit.</p><p>Dalam pengaturan Public Key Infrastructure (PKI) yang khas, tanda tangan digital dari Otoritas Sertifikat (CA) membuktikan bahwa sertifikat kunci publik tertentu valid. Setiap CA memiliki satu atau lebih kunci root; Dan sertifikat yang terkait dengan kunci publik tersebut adalah \"\" jangkar kepercayaan \"\" yang menggunakan jenis khusus sertifikat yang ditandatangani sendiri. Membangun kepercayaan dari sertifikat CA root tergantung pada prosedur di luar memeriksa tanda tangan digitalnya.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Kepercayaan dapat ditugaskan ke entitas yang tidak diklaimnya.</p></li><li><p>Lainnya: Lainnya: Data dari sumber yang tidak dipercaya (dan mungkin jahat) dapat diintegrasikan.</p></li><li><p>Kerahasiaan: Baca Data Aplikasi: Data dapat diungkapkan kepada entitas yang menyamar sebagai entitas tepercaya, menghasilkan pengungkapan informasi.</p></li></ul>",
        "remediation": "<p>Instal sertifikat tepercaya dari root ca terkemuka di server.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/306.html"
        ],
        "locale": "en",
        "title": "Ensure overall security",
        "vulnType": "OWASP WSTG",
        "description": "<p>Karena fakta bahwa ia menerima banyak perhatian selama pengembangan, mekanisme otentikasi utama sering kali merupakan fungsionalitas yang dikeraskan. Namun, ini biasanya tidak terjadi, untuk mekanisme otentikasi sekunder seperti fitur-fitur-fitur kata sandi atau rute alternatif lain yang dapat menghasilkan otentikasi aplikasi yang sukses.</p>",
        "observation": "<ul><li><p>Lainnya: Lainnya: Mengekspos fungsionalitas kritis pada dasarnya memberikan penyerang dengan tingkat hak istimewa fungsionalitas itu. Konsekuensinya akan tergantung pada fungsionalitas terkait, tetapi mereka dapat berkisar dari membaca atau memodifikasi data sensitif, akses ke fungsi administratif atau istimewa lainnya, atau bahkan mungkin eksekusi kode sewenang -wenang.</p></li></ul>",
        "remediation": "<p>Pastikan bahwa semua fitur otentikasi identitas akun (seperti profil pembaruan, kata sandi yang terlupakan, token yang dinonaktifkan/hilang, Bantuan Meja, atau IVR) yang dapat memungkinkan Anda untuk mendapatkan kembali akses ke akun Anda setidaknya sama amannya dengan peretasan seperti metode otentikasi utama.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/01-Test_Network_Infrastructure_Configuration",
          "https://cwe.mitre.org/data/definitions/477.html"
        ],
        "locale": "en",
        "title": "Outdated OS version (Known associated vulnerabilities)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Ketika versi sistem operasi server yang menjalankan aplikasi dapat ditentukan, masalah ini terjadi.</p><p>Segala jenis informasi yang berkaitan dengan teknologi yang mendukung aplikasi web harus selalu dirahasiakan untuk menghambat atau langsung mencegah bahwa begitu informasi ini diketahui, serangan yang ditargetkan terhadap perangkat lunak ini dapat direncanakan.</p>",
        "observation": "<ul><li><p>Lainnya: Degradasi Kualitas: Penyerang menggunakan fungsi yang tidak diperbarui</p></li></ul>",
        "remediation": "<p>Memperbarui sistem operasi ke versi terbaru disarankan.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/01-Test_Network_Infrastructure_Configuration",
          "https://cwe.mitre.org/data/definitions/477.html"
        ],
        "locale": "en",
        "title": "Outdated dependencies and libraries",
        "vulnType": "OWASP WSTG",
        "description": "<p>Peneliti keamanan melaporkan dan menyimpan kerentanan yang mereka temukan di perpustakaan, modul, kerangka kerja, platform, atau sistem operasi dalam daftar CVE. Mengingat bahwa daftar ini tersedia untuk semua orang, ini menyediakan akses untuk penyerang mana pun yang bertujuan untuk mengkompromikan aplikasi web yang sudah ketinggalan zaman.</p>",
        "observation": "<ul><li><p>Lainnya: Kurangi Pemeliharaan: Penyerang dapat menemukan kerentanan komponen yang sudah ketinggalan zaman dan menggunakannya untuk mengeksploitasi vektor serangan baru.</p></li></ul>",
        "remediation": "<p>Saran utama adalah untuk selalu menggunakan dependensi dan perpustakaan terbaru yang ditawarkan pabrikan. Selain itu, sangat disarankan untuk menggunakan alat -alat seperti pemeriksaan ketergantungan OWASP saat menjalankan pustaka dan modul aplikasi melalui SDLC. Program ini memindai pustaka dan modul impor untuk CVE yang dikenal.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces",
          "https://cwe.mitre.org/data/definitions/16.html"
        ],
        "locale": "en",
        "title": "Identification of management panels",
        "vulnType": "OWASP WSTG",
        "description": "<p>Tidak disarankan untuk panel administrasi atau panel otentikasi agar berbagai aplikasi dapat diakses secara publik di Internet. Oleh karena itu, akan lebih mudah untuk membatasi akses ke administrasi atau panel otentikasi ke koneksi VPN (Virtual Private Network) bila memungkinkan.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Disarankan untuk menggunakan VPN untuk terhubung ke sumber daya organisasi alih -alih membuka administrasi atau panel otentikasi ke Internet.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces",
          "https://cwe.mitre.org/data/definitions/16.html"
        ],
        "locale": "en",
        "title": "Server configuration not hardened",
        "vulnType": "OWASP WSTG",
        "description": "<p>Bagian mana pun dari tumpukan aplikasi, termasuk layanan jaringan, platform, server web, server aplikasi, basis data, kerangka kerja, kode khusus, mesin virtual, wadah, atau penyimpanan yang sudah dipasang sebelumnya, rentan terhadap kesalahan konfigurasi keamanan.</p><p>Penyerang sering mendapatkan akses tidak sah ke data atau fungsionalitas sistem tertentu berkat kelemahan tersebut. Kelemahan seperti itu kadang -kadang dapat membahayakan seluruh sistem. Persyaratan aplikasi dan perlindungan data menentukan dampak bisnis.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Menerapkan prosedur instalasi yang aman, seperti:</p><ul><li><p>Proses pengerasan berulang yang membuatnya cepat dan mudah untuk menggunakan lingkungan lain yang dikunci dengan benar. Pengembangan, QA, dan lingkungan produksi semua harus dikonfigurasi secara identik, dengan kredensial berbeda yang digunakan di setiap lingkungan. Proses ini harus diotomatisasi untuk meminimalkan upaya yang diperlukan untuk mengatur lingkungan yang aman baru.</p></li><li><p>Platform minimal tanpa fitur, komponen, dokumentasi, dan sampel yang tidak perlu. Hapus atau jangan menginstal fitur dan kerangka kerja yang tidak digunakan.</p></li><li><p>Tugas untuk meninjau dan memperbarui konfigurasi yang sesuai untuk semua catatan keamanan, pembaruan, dan tambalan sebagai bagian dari proses manajemen tambalan. Secara khusus, tinjau izin penyimpanan cloud.</p></li><li><p>Arsitektur aplikasi tersegmentasi yang memberikan pemisahan yang efektif dan aman antara komponen atau penyewa, dengan segmentasi, kontainerisasi, atau grup keamanan cloud (ACL).</p></li><li><p>Mengirim arahan keamanan ke klien, mis. Header keamanan.</p></li><li><p>Proses otomatis untuk memverifikasi efektivitas konfigurasi dan pengaturan di semua lingkungan.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/02-Test_Application_Platform_Configuration",
          "https://cwe.mitre.org/data/definitions/532.html"
        ],
        "locale": "en",
        "title": "Sensitive information in accessible logs",
        "vulnType": "OWASP WSTG",
        "description": "<p>Log adalah catatan kegiatan yang terjadi dalam jaringan dan sistem organisasi. Log terdiri dari entri log, dan setiap entri dalam log berisi detail tentang peristiwa tertentu yang telah terjadi dalam sistem atau jaringan.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Disarankan untuk menyimpan log di lokasi yang terpisah dan bukan di server web itu sendiri. Ini juga memfasilitasi agregasi log dari berbagai sumber yang merujuk pada aplikasi yang sama (seperti yang dari peternakan server web) dan juga memfasilitasi analisis log (yang dapat menjadi intensif CPU) tanpa mempengaruhi server itu sendiri.</p><p>Juga disarankan untuk mengimplementasikan rotasi log yang memastikan bahwa:</p><ul><li><p>Log disimpan untuk waktu yang ditentukan dalam kebijakan keamanan, tidak lebih dan tidak kurang.</p></li><li><p>Log dikompresi setelah diputar (ini adalah kenyamanan, karena itu berarti bahwa lebih banyak log akan disimpan untuk ruang disk yang tersedia yang sama).</p></li><li><p>Izin sistem file dari file log yang diputar sama (atau lebih ketat) daripada file log itu sendiri. Misalnya, server web perlu menulis ke log yang mereka gunakan, tetapi mereka sebenarnya tidak perlu menulis ke log yang diputar, yang berarti bahwa izin file dapat diubah pada waktu rotasi untuk mencegah proses server web memodifikasinya.</p></li><li><p>Beberapa server dapat memutar log ketika mereka mencapai ukuran tertentu. Jika ini terjadi, pastikan bahwa penyerang tidak dapat memaksa rotasi log untuk menyembunyikan jejaknya.</p></li></ul><p>Akhirnya, terapkan kontrol akses sehingga informasi log peristiwa tidak pernah terlihat oleh pengguna akhir dan menganalisis log secara berkala, misalnya berdasarkan pesan kesalahan:</p><ul><li><p>Pesan Kesalahan 40x (tidak ditemukan). Sejumlah besar dari mereka yang berasal dari sumber yang sama dapat menunjukkan bahwa alat pemindaian CGI sedang digunakan terhadap server web.</p></li><li><p>Pesan 50x (Kesalahan Server). Ini bisa menjadi indikasi bahwa penyerang menyalahgunakan bagian dari aplikasi yang gagal secara tidak terduga. Misalnya, tahap awal serangan injeksi SQL akan menghasilkan pesan kesalahan ini ketika kueri SQL tidak dibangun dengan baik dan eksekusi gagal dalam database ujung belakang.</p></li></ul><p>Statistik atau analisis log tidak boleh dihasilkan, atau disimpan, pada server yang sama yang menghasilkan log. Kalau tidak, penyerang dapat, melalui kerentanan server web atau konfigurasi yang tidak tepat, mengaksesnya dan mengambil informasi yang mirip dengan yang akan diungkapkan oleh file log itu sendiri.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information",
          "https://cwe.mitre.org/data/definitions/200.html",
          "https://cwe.mitre.org/data/definitions/530.html"
        ],
        "locale": "en",
        "title": "Backup file identification",
        "vulnType": "OWASP WSTG",
        "description": "<p>File yang tidak terkait dengan aplikasi tetapi dibuat sebagai hasil dari mengedit file aplikasi, setelah membuat cadangan saat digunakan, atau dengan meninggalkan file yang sudah ketinggalan zaman atau tidak direferensikan di pohon web adalah sumber kerentanan yang signifikan. Pengeditan on-the-fly dan tugas-tugas administratif lainnya pada server web produksi dapat secara tidak sengaja meninggalkan salinan cadangan yang dibuat secara otomatis oleh editor karena sedang diedit atau oleh administrator karena mereka menekan sekelompok file untuk membuat cadangan.</p><p>Mengedit file dapat meninggalkan salinan cadangan otomatis tipe .bak, .sav, .old, atau ~. Server web tidak dimiliki secara default menentukan interpretasi untuk jenis file ini, sehingga hasilnya biasanya untuk menampilkan isinya atau melanjutkan untuk mengunduhnya.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Untuk menghapus risikonya, perlu menghapus file cadangan yang ditemukan. Perlu untuk secara rutin mencari server untuk file dengan extensions.bak, .bac, .sav, .old, .bak, .bac, .sav, .old, .tar, .gz, dan.tgz dan menghapusnya dari server untuk memperbaiki jenis ini secara umum. Dalam perintah untuk menghindari memiliki file yang diunduh atau konten yang ditampilkan oleh we -tuxe oleh The Being oleh The Being oleh The Being yang umumnya adalah pengacaran yang harus dihindari memiliki file yang diunduh atau konten yang ditampilkan oleh Beens oleh The Being oleh The Being oleh The Beens adalah The Being yang ditampilkan oleh The Being Tamached oleh The Being Tamached juga adalah file yang ditampilkan oleh Beene oleh The Beening oleh The Beening oleh The Beening oleh The Beening oleh The Beens Tampilan oleh The Beens To Pameran. extensions. Jika root dokumen ada pada sistem file yang memanfaatkan teknologi ini, snapshot sistem file tidak boleh diakses melalui web. Konfigurasikan server web Anda untuk menolak akses ke direktori tersebut, misalnya, di Apache Petunjuk lokasi seperti ini harus digunakan:</p><p><location \".snapshot\"=\"\" ~=\"\">Pesanan disangkal, biarkan menyangkal dari semua</location></p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods",
          "https://cwe.mitre.org/data/definitions/16.html"
        ],
        "locale": "en",
        "title": "Insecure HTTP methods enabled",
        "vulnType": "OWASP WSTG",
        "description": "<p>Berbagai teknik tersedia melalui HTTP untuk melakukan operasi di server web (standar HTTP 1.1 mengacu padanya sebagai metode, tetapi mereka juga umumnya digambarkan sebagai kata kerja). Meskipun Get dan Post sejauh ini merupakan cara paling populer untuk mengakses data dari server web, HTTP juga mendukung sejumlah cara tambahan yang kurang terkenal. Jika server web salah dikonfigurasi, beberapa di antaranya dapat digunakan dengan jahat.</p>",
        "observation": "<ul><li><p>Lainnya: Dampak Teknis: Bervariasi berdasarkan Konteks</p></li></ul>",
        "remediation": "<p>Metode yang ditentukan untuk berlebihan dalam konfigurasi server harus dinonaktifkan.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy",
          "https://cwe.mitre.org/data/definitions/16.html",
          "https://cwe.mitre.org/data/definitions/693.html",
          "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
          "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
        ],
        "locale": "en",
        "title": "Lack of security HTTP headers",
        "vulnType": "OWASP WSTG",
        "description": "<p>Header keamanan diimplementasikan sebagai header respons HTTP yang membatasi potensi eksploitasi kerentanan sisi klien dengan menginstruksikan browser bagaimana berperilaku dalam keadaan tertentu. Konfigurasi keamanan penuh yang diperlukan untuk membuat koneksi yang aman dengan klien tidak ada dalam respons server.</p>",
        "observation": "<ul><li><p>Kontrol akses: Bypass Mekanisme Perlindungan: Pengendalian Akses Pemeriksaan untuk data pengguna atau fungsionalitas tertentu dapat dilewati.</p></li></ul>",
        "remediation": "<p>Implementasi semua header HTTP keamanan dalam respons server direkomendasikan. Nilai yang disarankan adalah:</p><ul><li><p>Strict-Transport-Security (HSTS): MAX-AGE = 31536000; termasuk domain.</p></li><li><p>Konten-keamanan-kebijakan: default-src https: 'self'.</p></li><li><p>X-XSS-Proteksi: 1</p></li><li><p>X-frame-options: 'DENY' (jika tidak mungkin, 'SameRoRigin').</p></li><li><p>X-Content-Type-Options: Nosniff.</p></li><li><p>Cache-Control: No-store.</p></li><li><p>POLICE REPERRRER: 'NO-REGERRER' (atau 'SAMA-PORIGIN').</p></li><li><p>Izin-kebijakan: Tentukan fungsi minimum yang diizinkan dan tolak yang lain.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy",
          "https://cwe.mitre.org/data/definitions/16.html",
          "https://cwe.mitre.org/data/definitions/693.html",
          "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
          "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
        ],
        "locale": "en",
        "title": "Absence of HSTS (HTTP Strict Transport Security) header",
        "vulnType": "OWASP WSTG",
        "description": "<p>Header HTTP \"HSTS Security Security\" (HSTS) digunakan untuk menggagalkan upaya untuk mencegat komunikasi, cookie, dll. Mekanisme ini memungkinkan server web untuk menyatakan bahwa hanya mengamankan koneksi HTTP - HTTP lebih dari TLS/SSL - diizinkan untuk komunikasi browser.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: penyerang bisa mendapatkan akses yang tidak sah ke sistem dengan mengambil kredensial otentikasi pengguna yang sah yang sah</p></li></ul>",
        "remediation": "<p>Tentukan header HTTP Strict-Transport-Security, yang menginstruksikan browser klien untuk secara otomatis mengalihkan permintaan yang diterima melalui protokol HTTP ke protokol HTTPS Secure daripada menggunakan atau memaksa protokol yang tidak aman.</p><p><strict-transport-security: includesubdomains=\"\" max-age=\"60000;\"></strict-transport-security:></p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy",
          "https://cwe.mitre.org/data/definitions/16.html",
          "https://cwe.mitre.org/data/definitions/693.html",
          "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
          "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
        ],
        "locale": "en",
        "title": "Absence of X-Frame-Options header",
        "vulnType": "OWASP WSTG",
        "description": "<p>Seorang pengguna ditipu untuk menggunakan fungsionalitas di situs web tersembunyi dengan mengklik beberapa konten lain di situs web palsu menggunakan kerentanan clickjacking. Metode ini didasarkan pada menanamkan tombol atau tautan tersembunyi, misalnya, dalam iframe, pada halaman web (atau halaman) yang dapat ditindaklanjuti (atau halaman). Konten web umpan yang diantisipasi pengguna dilapis oleh iframe.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Penyerang dapat memperoleh hak istimewa dengan memodifikasi atau membaca data penting secara langsung, atau dengan mengakses fungsionalitas istimewa yang dilindungi secara tidak cukup.</p></li></ul>",
        "remediation": "<p>Header X-Frame-Options didukung oleh sebagian besar browser web kontemporer. Disarankan untuk mengatur server web sehingga header ini diaktifkan untuk semua halaman web. Opsi Sameorigin harus digunakan jika halaman diantisipasi hanya berisi kode dari server.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy",
          "https://cwe.mitre.org/data/definitions/16.html",
          "https://cwe.mitre.org/data/definitions/693.html",
          "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
          "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
        ],
        "locale": "en",
        "title": "Absence of Content Security Policy (CSP) header",
        "vulnType": "OWASP WSTG",
        "description": "<p>Header respons HTTP yang meningkatkan keamanan disebut kebijakan-keamanan konten. Dengan bantuan header ini, Anda dapat membatasi sumber daya yang dapat dimuat oleh browser, termasuk JavaScript, CSS, dan banyak lagi.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Penyerang dapat memperoleh hak istimewa dengan memodifikasi atau membaca data penting secara langsung, atau dengan mengakses fungsionalitas istimewa yang dilindungi secara tidak cukup.</p></li><li><p>Kontrol akses: Bypass Mekanisme Perlindungan: Pengendalian Akses Pemeriksaan untuk data pengguna atau fungsionalitas tertentu dapat dilewati.</p></li><li><p>Kerahasiaan: Baca Data Aplikasi: Data dapat diungkapkan kepada entitas yang menyamar sebagai entitas tepercaya, menghasilkan pengungkapan informasi.</p></li><li><p>Kontrol Akses: Modifikasi Data Aplikasi: Penyerang dapat menipu pengguna untuk melakukan tindakan yang bertopeng dan disembunyikan dari tampilan pengguna. Dampaknya sangat bervariasi, tergantung pada fungsionalitas aplikasi yang mendasarinya. Misalnya, dalam aplikasi media sosial, clickjacking dapat digunakan untuk Trik pengguna agar mengubah pengaturan privasi.</p></li></ul>",
        "remediation": "<p>Dengan memasukkan header kebijakan-keamanan konten di header respons HTTP, yang memberitahu browser untuk menerapkan kebijakan yang diinginkan, Anda dapat mengaktifkan CSP di situs web.</p><p>Konten-Security-Policy: Script-src https://example.com:*;&gt;</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy",
          "https://cwe.mitre.org/data/definitions/16.html",
          "https://cwe.mitre.org/data/definitions/693.html",
          "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
          "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
        ],
        "locale": "en",
        "title": "Absence of Cache Control header",
        "vulnType": "OWASP WSTG",
        "description": "<p>Arahan untuk mekanisme caching ditentukan dalam header kontrol cache HTTP.</p>",
        "observation": "<ul><li><p>Kontrol akses: Bypass Mekanisme Perlindungan: Pengendalian Akses Pemeriksaan untuk data pengguna atau fungsionalitas tertentu dapat dilewati.</p></li></ul>",
        "remediation": "<p>Buat header kontrol cache di server web Anda dengan instruksi yang diperlukan. Nilai header pragma harus tidak ada cache dan nilai kontrol cache harus tidak ada cache, tidak ada toko jika halaman berisi informasi sensitif.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy",
          "https://cwe.mitre.org/data/definitions/16.html",
          "https://cwe.mitre.org/data/definitions/693.html",
          "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
          "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
        ],
        "locale": "en",
        "title": "Absence of Pragma header",
        "vulnType": "OWASP WSTG",
        "description": "<p>Header Pragma adalah header khusus implementasi yang dapat memengaruhi rantai permintaan-respons dalam beberapa cara. Ketika header HTTP/1.1 cache-control belum ada, itu digunakan untuk kompatibilitas ke belakang dengan versi cache HTTP/1.0 sebelumnya.</p>",
        "observation": "<ul><li><p>Kontrol akses: Bypass Mekanisme Perlindungan: Pengendalian Akses Pemeriksaan untuk data pengguna atau fungsionalitas tertentu dapat dilewati.</p></li></ul>",
        "remediation": "<p>Header kontrol cache adalah cara ideal untuk menentukan kebijakan caching ketika setidaknya HTTP/1.1 digunakan dalam respons server. Header untuk pragma dapat dihapus.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy",
          "https://cwe.mitre.org/data/definitions/16.html",
          "https://cwe.mitre.org/data/definitions/693.html",
          "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
          "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
        ],
        "locale": "en",
        "title": "Absence of Feature Policy header",
        "vulnType": "OWASP WSTG",
        "description": "<p>Pengembang web dapat secara selektif mengaktifkan, menonaktifkan, dan mengubah perilaku API spesifik dan fitur Web di browser dengan menggunakan kebijakan fitur header. Perhatikan bahwa header ini telah dibagi menjadi kebijakan-izin dan kebijakan-dokumen, dan bahwa itu akan dianggap sudah usang setelah semua fitur yang terkena dampak telah dieliminasi dari kebijakan fitur.</p>",
        "observation": "<ul><li><p>Kontrol akses: Bypass Mekanisme Perlindungan: Pengendalian Akses Pemeriksaan untuk data pengguna atau fungsionalitas tertentu dapat dilewati.</p></li></ul>",
        "remediation": "<p>Di bawah ini adalah contoh cara menambahkan header kebijakan fitur ke respons server web:</p><p><feature-policy: 'self'=\"\" 'self';=\"\" *;=\"\" example.com=\"\" https:=\"\" sync-xhr=\"\" usermedia=\"\" vibrate=\"\"></feature-policy:></p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/116.html"
        ],
        "locale": "en",
        "title": "Absence of Referrer Policy header",
        "vulnType": "OWASP WSTG",
        "description": "<p>Permintaan yang dibuat dari dokumen, dan untuk navigasi yang jauh dari dokumen itu dikaitkan dengan header referer. Sementara header dapat ditekan untuk tautan dengan tipe tautan NOREFERRER, penulis mungkin ingin mengontrol header referer lebih langsung karena sejumlah alasan:</p><ul><li><p>Privacy: a social networking site has a profile page for each of its users, and users add hyperlinks from their profile page to their favorite bands.The social networking site might not wish to leak the user’s profile URL to the band web sites when other users follow those hyperlinks (because the profile URLs might reveal the identity of the owner of the profile).Some social networking sites, however, might wish to inform the band web sites that the links originated from the social networking site but tidak mengungkapkan profil pengguna spesifik mana yang berisi tautan.</p></li><li><p>Keamanan: Aplikasi web menggunakan HTTPS dan pengidentifikasi sesi berbasis URL. Aplikasi web mungkin ingin menautkan ke sumber daya HTTPS di situs web lain tanpa membocorkan pengidentifikasi sesi pengguna di URL. Atau, aplikasi web dapat menggunakan URL yang sendiri memberikan kemampuan. Mengontrol pengirim dapat membantu mencegah URL kemampuan ini bocor melalui header pengirim.</p></li></ul><p>Perhatikan bahwa ada cara lain agar URL kemampuan bocor, dan mengendalikan pengirim tidak cukup untuk mengendalikan semua kebocoran potensial tersebut.</p><ul><li><p>TrackBack: Sebuah blog yang di -host melalui HTTPS mungkin ingin menautkan ke blog yang di -host melalui HTTP dan menerima tautan trackback.</p></li></ul>",
        "observation": "<ul><li><p>Kontrol akses: Bypass Mekanisme Perlindungan: Pengendalian Akses Pemeriksaan untuk data pengguna atau fungsionalitas tertentu dapat dilewati.</p></li></ul>",
        "remediation": "<p>Kebijakan Referensi Berapa banyak data pengirim, yang dikirimkan melalui header referer, harus disertakan dengan permintaan dikendalikan oleh header HTTP. Header referer memiliki banyak niat baik, tetapi juga memiliki efek yang tidak menguntungkan pada keamanan dan privasi pengguna. Nilai -nilai berikut harus dikonfigurasi dalam kebijakan:</p><p>REDERRER-POLICY: NO-REFERRERRERRERRER-POLICY: SAMA-BRIGIN</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/116.html"
        ],
        "locale": "en",
        "title": "Absence of X-Content-Type-Options header",
        "vulnType": "OWASP WSTG",
        "description": "<p>Untuk melindungi terhadap unduhan file reflektif dan jenis suntikan lainnya, panggilan balik API tertentu harus memiliki header keamanan yang dikonfigurasi dengan benar.</p><p>Selain itu, konfirmasi apakah input pengguna tercermin dalam respons API dan apakah itu dinamis. Jika demikian, untuk menghentikan XSS dan serangan eksekusi metode asal yang sama, Anda harus memvalidasi dan menyandikan input.</p>",
        "observation": "<ul><li><p>Kontrol akses: Bypass Mekanisme Perlindungan: Pengendalian Akses Pemeriksaan untuk data pengguna atau fungsionalitas tertentu dapat dilewati.</p></li></ul>",
        "remediation": "<p>Sanitasi masukan API Anda; Melarikan diri tidak cukup dalam kasus ini; Mereka seharusnya hanya mengizinkan alfanumerik. Pastikan opsi tipe-X-Content hadir dalam setiap respons API. Untuk menghentikan browser dari menafsirkan file sebagai sesuatu selain dari apa yang telah dinyatakan oleh tipe konten, gunakan Nosniff (ini membantu mencegah XSS jika halaman tersebut ditafsirkan sebagai HTML atau JS).</p><p>Menambahkan</p><p>Disposisi konten: lampiran; FileName = \"FileName.Extension\"</p><p>Dengan ekstensi yang sesuai dengan ekstensi file dan contentType, pada API yang tidak akan diterjemahkan</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/524.html"
        ],
        "locale": "en",
        "title": "Anti-Caching header (Server-side)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Header anti-caching mencegah data sensitif dari disimpan pada proxy terbalik, penyeimbang beban dan modul cache aplikasi. By not implementing this headers correctly, sensitive information may be stored within the cache of these modules and may be exposed.Let's see two examples of improperly configured headers:Cache-Control: max-age=315360000, public: the response may be stored by any cacheCache-Control: private: the response may be stored by a browser's cache</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Kerentanan ini akan berkurang jika header anti-caching diimplementasikan dengan benar. Header anti-caching yang digunakan dengan tepat akan menyerupai:</p><p>CACHE-CONTROL: NO-STOREPRAGMA: NO-CACHE (hanya untuk kompatibilitas ke belakang dengan klien HTTP/1.0)</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/173.html"
        ],
        "locale": "en",
        "title": "Unsafe Content-Type header within the response",
        "vulnType": "OWASP WSTG",
        "description": "<p>Menetapkan header konten yang tepat sangat penting untuk memperkuat keamanan aplikasi Anda karena menurunkan paparan Anda terhadap serangan unduhan drive-by dan situs web yang menampung konten yang diunggulkan pengguna yang, karena penamaan yang cerdas, MS Internet Explorer dapat salah mengira untuk file HTML yang dapat dieksekusi atau dinamis, menciptakan cacat keamanan.</p>",
        "observation": "<ul><li><p>Kontrol akses: Bypass Mekanisme Perlindungan: Pengendalian Akses Pemeriksaan untuk data pengguna atau fungsionalitas tertentu dapat dilewati.</p></li></ul>",
        "remediation": "<p>Contoh header tipe konten yang aman adalah:</p><p>Tipe konten: teks/html; charset = UTF8Content-Type: Application/JSON;</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission",
          "https://cwe.mitre.org/data/definitions/732.html"
        ],
        "locale": "en",
        "title": "Excessive file and directory permissions",
        "vulnType": "OWASP WSTG",
        "description": "<p>Memberikan sumber daya pengaturan izin yang memungkinkan akses ke kelompok pengguna yang lebih besar daripada yang diperlukan berisiko mengekspos data sensitif atau memungkinkan individu yang tidak berwenang mengubah sumber daya. Ketika sumber daya terhubung ke konfigurasi program, eksekusi, atau data pengguna yang sensitif, ini sangat berisiko.</p><p>Contoh yang jelas adalah file eksekusi yang dapat dieksekusi oleh pengguna yang tidak sah. Contoh lain adalah bahwa informasi akun atau nilai token untuk mengakses API (semakin umum di layanan web atau layanan mikro saat ini) dapat disimpan dalam file konfigurasi yang izinnya ditetapkan secara default untuk dapat dibaca oleh semua orang dari instalasi. Data sensitif ini dapat diekspos oleh pengguna internal jahat atau oleh penyerang jarak jauh yang telah membahayakan layanan dengan kerentanan lainnya, tetapi memiliki hak istimewa yang rendah.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Kode yang disuntikkan dapat mengakses data / file terbatas.</p></li><li><p>Kerahasiaan: Baca file atau direktori: Penyerang dapat membaca data sensitif, baik dengan membaca data langsung dari penyimpanan data yang tidak dibatasi dengan baik, atau dengan mengakses fungsionalitas istimewa yang tidak dilindungi dan tidak cukup untuk membaca data.</p></li></ul>",
        "remediation": "<p>Mengatur izin file dan direktori dengan benar akan membantu mengatasi kerentanan ini dengan mencegah pengguna yang tidak berwenang untuk mengakses sumber daya vital yang tidak perlu.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
    "category": "Configuration and Deploy Management",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/770.html"
        ],
        "locale": "en",
        "title": "Allocation of Resources Without Limits or Throttling",
        "vulnType": "OWASP WSTG",
        "description": "<p>Sebagai pelanggaran terhadap kebijakan keamanan yang dimaksudkan untuk aktor tersebut, perangkat lunak mengalokasikan sumber daya yang dapat digunakan kembali atau serangkaian sumber daya atas nama aktor tanpa memaksakan batasan apa pun pada ukuran atau jumlah sumber daya yang dapat dialokasikan.</p>",
        "observation": "<ul><li><p>Ketersediaan: DOS: Konsumsi Sumber Daya (Lainnya): Saat mengalokasikan sumber daya tanpa batas, penyerang dapat mencegah sistem, aplikasi, atau proses lain dari mengakses jenis sumber daya yang sama.</p></li></ul>",
        "remediation": "<p>Persyaratan</p><ul><li><p>Tentukan dengan jelas ekspektasi minimum dan maksimum untuk kemampuan, dan menentukan perilaku mana yang dapat diterima ketika alokasi sumber daya mencapai batas.</p></li></ul><p>Arsitektur dan Desain- Batasi jumlah sumber daya yang dapat diakses oleh pengguna yang tidak beruntung. Tetapkan batas per-pengguna untuk sumber daya. Izinkan administrator sistem untuk menentukan batasan ini. Berhati-hatilah untuk menghindari 410.- Desain mekanisme pelambatan ke dalam arsitektur sistem. Perlindungan terbaik adalah membatasi jumlah sumber daya yang dapat dikeluarkan oleh pengguna yang tidak sah. Model otentikasi dan kontrol akses yang kuat akan membantu mencegah serangan seperti itu terjadi di tempat pertama, dan itu akan membantu administrator untuk mengidentifikasi siapa yang melakukan pelecehan. Aplikasi login harus dilindungi terhadap serangan DOS sebanyak mungkin. Membatasi akses basis data, mungkin dengan set hasil caching, dapat membantu meminimalkan sumber daya yang dikeluarkan. Untuk lebih membatasi potensi serangan DOS, pertimbangkan untuk melacak tingkat permintaan yang diterima dari pengguna dan memblokir permintaan yang melebihi ambang batas tarif yang ditentukan.- Pastikan bahwa protokol memiliki batasan skala spesifik yang ditempatkan di atasnya.- Untuk pemeriksaan keamanan apa pun yang dilakukan di sisi klien, klien-pemeriksaan ini digandakan di sisi server, untuk menghindari 602: klien-s-s-soorcements diideer. Penyerang dapat memotong cek sisi klien dengan memodifikasi nilai setelah cek dilakukan, atau dengan mengubah klien untuk menghapus cek sisi klien sepenuhnya. Kemudian, nilai -nilai yang dimodifikasi ini akan dikirimkan ke server.</p><p>Implementasi- Asumsikan semua input berbahaya. Gunakan strategi validasi input yang \"terima yang diketahui\", yaitu, gunakan daftar input yang dapat diterima yang sangat sesuai dengan spesifikasi. Tolak input apa pun yang tidak sepenuhnya sesuai dengan spesifikasi, atau mengubahnya menjadi sesuatu yang dilakukan.- Saat melakukan validasi input, pertimbangkan semua properti yang berpotensi relevan, termasuk panjang, jenis input, berbagai nilai yang dapat diterima, input yang hilang atau ekstra, sintaksis, konsistensi di seluruh bidang terkait, dan kesesuaian dengan aturan bisnis. Sebagai contoh logika aturan bisnis, \"kapal\" mungkin secara sintaksis valid karena hanya berisi karakter alfanumerik, tetapi tidak valid jika input hanya diharapkan berisi warna seperti \"merah\" atau \"biru.\"- tidak mengandalkan secara eksklusif mencari input jahat atau cacat. Ini cenderung kehilangan setidaknya satu input yang tidak diinginkan, terutama jika lingkungan kode berubah. Ini dapat memberi penyerang cukup ruang untuk memotong validasi yang dimaksud. Namun, daftar hitam dapat berguna untuk mendeteksi serangan potensial atau menentukan input mana yang sangat cacat sehingga harus ditolak secara langsung.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Identity Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account",
          "https://cwe.mitre.org/data/definitions/203.html",
          "https://cwe.mitre.org/data/definitions/204.html",
          "https://cwe.mitre.org/data/definitions/200.html"
        ],
        "locale": "en",
        "title": "Account (users) enumeration",
        "vulnType": "OWASP WSTG",
        "description": "<p>Karena kesalahan konfigurasi atau pilihan desain yang disengaja, aplikasi web sering memperjelas apakah nama pengguna sudah ada pada sistem. Misalnya, ketika kredensial yang salah dikirim, pesan yang dihasilkan kadang -kadang dapat menunjukkan apakah nama pengguna sudah ada dalam sistem atau apakah kata sandi dimasukkan secara tidak benar. Penyerang dapat menggunakan informasi yang telah mereka kumpulkan untuk menyusun daftar pengguna untuk sistem. Dengan menggunakan serangan brute force atau nama pengguna dan kata sandi default, misalnya, informasi ini dapat digunakan untuk menyerang aplikasi web.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li><li><p>Kontrol akses: Bypass Mekanisme Perlindungan: Pengendalian Akses Pemeriksaan untuk data pengguna atau fungsionalitas tertentu dapat dilewati.</p></li></ul>",
        "remediation": "<p>Ada beberapa rekomendasi untuk menghindari jenis kerentanan ini. Solusi terbaik adalah menerapkan sebagian atau semuanya sesuai kebutuhan:</p><ul><li><p>Hindari menggunakan data publik (alias, email, dll.) Sebagai nama pengguna untuk mengotentikasi dalam aplikasi. Data ini harus bersifat pribadi dan hanya diketahui oleh pengguna.</p></li><li><p>Selama fase pengembangan, optimalkan proses otentikasi pengguna untuk menghindari waktu respons \"tinggi\" selama otentikasi.</p></li><li><p>Jangan gunakan pesan informatif yang membantu menebak keberadaan nama pengguna.</p></li><li><p>Hindari perilaku yang berbeda dalam aplikasi web tergantung pada keberadaan nama pengguna.</p></li><li><p>Delegasikan generasi nama pengguna ke aplikasi web. Generator yang digunakan harus sepenuhnya acak dan tidak pernah berurutan karena dapat diprediksi.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Identity Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/02-Test_User_Registration_Process",
          "https://cwe.mitre.org/data/definitions/287.html"
        ],
        "locale": "en",
        "title": "Insecure user registration process",
        "vulnType": "OWASP WSTG",
        "description": "<p>Penyediaan akses sistem ke pengguna diotomatisasi (atau sebagian otomatis) oleh beberapa proses pendaftaran pengguna aplikasi web. Bergantung pada persyaratan keamanan sistem, persyaratan identitas untuk akses dapat berkisar dari identifikasi positif hingga tidak ada sama sekali. Karena ukuran basis pengguna mereka, banyak aplikasi publik sepenuhnya mengotomatiskan proses pendaftaran dan penyediaan. Seorang peretas dapat menggunakan kerentanan ini untuk mengontrol akun pengguna lain, misalnya, jika praktik terbaik tidak diikuti ketika mengotomatiskan proses pendaftaran.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Jalankan kode atau perintah yang tidak sah: Kelemahan ini dapat menyebabkan paparan sumber daya atau fungsionalitas kepada aktor yang tidak diinginkan, mungkin memberikan informasi sensitif kepada penyerang atau bahkan menjalankan kode sewenang -wenang.</p></li></ul>",
        "remediation": "<p>Disarankan untuk menerapkan persyaratan identifikasi dan verifikasi yang sesuai dengan persyaratan keamanan data yang dilindungi oleh kredensial.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N",
    "category": "Identity Management",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/384.html"
        ],
        "locale": "en",
        "title": "The login functionality should always generate a new session id",
        "vulnType": "OWASP WSTG",
        "description": "<p>Cookie sesi baru harus dibuat oleh aplikasi setiap kali pengguna berhasil diautentikasi.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Aplikasi tidak membatalkan pengidentifikasi sesi yang ada dan memberikan kesempatan kepada penyerang untuk mencuri sesi yang diautentikasi.</p></li></ul>",
        "remediation": "<p>Setelah login yang berhasil, fungsi login harus selalu membuat (dan menggunakan) ID sesi baru. Ini dilakukan untuk menghentikan penyerang menyerang pengguna Anda menggunakan serangan fiksasi sesi. Sebagian kerangka kerja, seperti aplikasi.net, jangan biarkan Anda mengubah ID sesi saat Anda masuk. Anda dapat menambahkan cookie acak ekstra dengan token yang kuat pada login setiap kali masalah ini muncul dan menyimpan nilai dalam variabel sesi.</p><p>Sekarang setelah otentikasi tergantung pada lebih dari sekadar ID sesi dan cookie acak tidak dapat diprediksi atau diperbaiki oleh penyerang, Anda dapat membandingkan nilai cookie dengan variabel sesi untuk mencegah fiksasi sesi.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy",
          "https://cwe.mitre.org/data/definitions/521.html"
        ],
        "locale": "en",
        "title": "Weaknesses in password policy",
        "vulnType": "OWASP WSTG",
        "description": "<p>Semua fitur keamanan yang dimasukkan ke dalam infrastruktur teknologi dapat diekspos oleh kebijakan kata sandi LAX. Tanpa memanfaatkan kerentanan lainnya, menebak kata sandi akan memberikan akses ke sistem yang sah. Ini sering terjadi di domain organisasi besar, di mana pengguna administrator dengan hak istimewa yang lebih tinggi sepenuhnya dilupakan demi pengguna reguler dengan akses terbatas yang diterapkan oleh kebijakan kata sandi yang ketat. Dengan kata lain, berbeda dengan pengguna dengan hak istimewa terbatas, pengguna administrator dapat menggunakan kata sandi yang dianggap lemah. Agar sederhana bagi pengguna baru untuk terhubung, banyak layanan datang dengan nama pengguna dan kata sandi default pada awalnya. Langkah penting untuk mengubah informasi ini sering diabaikan, membuat sistem dapat diakses menggunakan apa yang dikenal sebagai kredensial default.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Seiring bertambahnya usia kata sandi, probabilitas bahwa mereka dikompromikan tumbuh.</p></li><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Penyerang dapat dengan mudah menebak kata sandi pengguna dan mendapatkan akun pengguna akses.</p></li></ul>",
        "remediation": "<p>Tetapkan kebijakan kata sandi yang kuat yang mengharuskan pengguna untuk:</p><ul><li><p>Panjang kata sandi minimum 8 karakter menggunakan semua jenis karakter, termasuk huruf kapital dan huruf kecil, angka, dan karakter khusus.</p></li><li><p>Memanfaatkan algoritma enkripsi yang efektif seperti AES-128 atau SHA-256</p></li><li><p>Periksa untuk melihat apakah kata sandi kosong dilarang.</p></li><li><p>Hindari menggunakan pengidentifikasi pengguna (atau subset apa pun) sebagai kata sandi.- Secara teratur memaksa perubahan.</p></li><li><p>Cegah pengguna menggunakan kata sandi sebelumnya.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/263.html"
        ],
        "locale": "en",
        "title": "No password rotation policy",
        "vulnType": "OWASP WSTG",
        "description": "<p>Beberapa kebijakan mengharuskan pengguna untuk mengubah kata sandi secara berkala, seringkali setiap 90 atau 180 hari.</p><p>Manfaat dari kedaluwarsa kata sandi, bagaimanapun, dapat diperdebatkan. Sistem yang menerapkan kebijakan seperti itu kadang -kadang mencegah pengguna memilih kata sandi yang terlalu dekat dengan pilihan sebelumnya.</p><p>Kebijakan ini seringkali bisa menjadi bumerang. Beberapa pengguna merasa sulit untuk menyusun kata sandi \"baik\" yang juga mudah diingat, jadi jika orang diharuskan memilih banyak kata sandi karena mereka harus sering mengubahnya, mereka akhirnya menggunakan kata sandi yang jauh lebih lemah; Kebijakan ini juga mendorong pengguna untuk menuliskan kata sandi. Juga, jika kebijakan tersebut mencegah pengguna mengulangi kata sandi baru -baru ini, ini mensyaratkan bahwa ada database yang ada dari kata sandi semua orang baru -baru ini (atau hash mereka) alih -alih membuat yang lama terhapus dari memori. Akhirnya, pengguna dapat mengubah kata sandi mereka berulang kali dalam beberapa menit, dan kemudian mengubah kembali ke yang mereka benar -benar ingin gunakan, menghindari kebijakan perubahan kata sandi sama sekali.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Seiring bertambahnya usia kata sandi, probabilitas bahwa mereka dikompromikan tumbuh.</p></li></ul>",
        "remediation": "<p>Hanya ketika kekuatan kata sandi yang dipaksakan aplikasi tidak lagi cukup kuat untuk menahan serangan brute karena peningkatan daya komputasi dapat dibuat untuk memperbarui kata sandi mereka.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/620.html"
        ],
        "locale": "en",
        "title": "Permit password change",
        "vulnType": "OWASP WSTG",
        "description": "<p>Pengguna harus memiliki opsi untuk mengubah kata sandi mereka kapan pun diperlukan. Pertimbangkan, misalnya, situasi di mana mereka sering menggunakan kata sandi yang sama di berbagai aplikasi. Pengguna harus segera memperbarui informasi login mereka di setiap aplikasi yang telah mereka daftarkan jika kata sandi mereka dikompromikan. Oleh karena itu, ada kemungkinan akun pengguna dapat dikompromikan jika aplikasi tidak memberinya akses ke fitur pembaruan kata sandi.</p>",
        "observation": "<ul><li><p>Kontrol akses: Bypass Mekanisme Perlindungan: Pengendalian Akses Pemeriksaan untuk data pengguna atau fungsionalitas tertentu dapat dilewati.</p></li><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Seiring bertambahnya usia kata sandi, probabilitas bahwa mereka dikompromikan tumbuh.</p></li></ul>",
        "remediation": "<p>Aplikasi harus menawarkan fitur yang memungkinkan pengguna untuk memodifikasi kata sandi mereka sendiri.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/521.html"
        ],
        "locale": "en",
        "title": "Verify breached passwords",
        "vulnType": "OWASP WSTG",
        "description": "<p>Selama bertahun -tahun, pelanggaran telah mengakibatkan rilis berbagai database yang berisi kredensial curian. Pengguna tunduk pada serangan kamus jika mereka memilih kata sandi yang dikompromikan.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Penyerang dapat dengan mudah menebak kata sandi pengguna dan mendapatkan akun pengguna akses.</p></li></ul>",
        "remediation": "<p>Periksa apakah kata sandi yang dimasukkan selama pembuatan akun, login, dan perubahan kata sandi dibandingkan dengan daftar kata sandi yang telah dikompromikan. Aplikasi harus mengharuskan pengguna untuk memasukkan kembali kata sandi yang belum dikompromikan jika kata sandi yang mereka pilih telah dikompromikan.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/330.html"
        ],
        "locale": "en",
        "title": "Secrets should be secure random generated",
        "vulnType": "OWASP WSTG",
        "description": "<p>Kata sandi, token API, dan kunci rahasia harus dihasilkan secara dinamis. Token ini dapat diprediksi dan digunakan oleh penyerang untuk mengkompromikan akun pengguna kapan pun mereka tidak dihasilkan secara dinamis.</p>",
        "observation": "<ul><li><p>Lainnya: Lainnya: Ketika mekanisme perlindungan bergantung pada nilai -nilai acak untuk membatasi akses ke sumber daya sensitif, seperti ID sesi atau benih untuk menghasilkan kunci kriptografi, maka sumber daya yang dilindungi dapat diakses dengan menebak ID atau kunci</p></li><li><p>Lainnya: Lainnya: Jika perangkat lunak bergantung pada ID yang unik dan tidak dapat dialami untuk mengidentifikasi sumber daya, penyerang mungkin dapat menebak ID untuk sumber daya yang dimiliki oleh pengguna lain. Penyerang kemudian dapat membaca sumber daya, atau membuat sumber daya sebelumnya dengan ID yang sama untuk mencegah program yang sah agar tidak mengirim sumber daya dengan benar ke pengguna yang dituju. Misalnya, suatu produk dapat mempertahankan informasi sesi dalam file yang namanya didasarkan pada nama pengguna. Seorang penyerang dapat membuat pra-membuat file ini untuk pengguna korban, kemudian mengatur izin sehingga aplikasi tidak dapat menghasilkan sesi untuk korban, mencegah korban menggunakan aplikasi.</p></li><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Ketika mekanisme otorisasi atau otentikasi bergantung pada nilai -nilai acak untuk membatasi akses ke fungsionalitas terbatas, seperti ID sesi atau benih untuk menghasilkan kunci kriptografi, maka penyerang dapat mengakses fungsionalitas terbatas dengan menebak ID atau kunci.</p></li></ul>",
        "remediation": "<p>Nilai-nilai ini harus dihasilkan secara dinamis dan hanya valid sekali ketika datang ke token API dan kunci rahasia. Token rahasia harus secara kriptografis \"aman acak,\" memiliki setidaknya 120 bit entropi yang efektif, diasinkan dengan nilai 32-bit khusus dan dihasilkan secara acak, dan dikeluarkan menggunakan fungsi hashing (satu jalan) yang diakui.</p><p>Alih -alih memberi pengguna kata sandi yang dihasilkan secara dinamis, kata sandi harus dibuat oleh pengguna itu sendiri. Untuk mengaktifkan akunnya dan membuat kata sandi sendiri, pengguna harus diberikan tautan satu kali dengan token acak secara kriptografis melalui email atau SMS.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism",
          "https://cwe.mitre.org/data/definitions/804.html",
          "https://cwe.mitre.org/data/definitions/645.html",
          "https://cwe.mitre.org/data/definitions/1216.html",
          "https://cwe.mitre.org/data/definitions/307.html"
        ],
        "locale": "en",
        "title": "Weaknesses in protection against brute force attacks",
        "vulnType": "OWASP WSTG",
        "description": "<p>Yang dihadapi pengembang web ancaman umum adalah serangan tebakan kata sandi yang dikenal sebagai serangan brute force. Serangan brute-force adalah upaya untuk menemukan kata sandi dengan secara sistematis mencoba setiap kombinasi huruf, angka, dan simbol yang mungkin sampai Anda menemukan satu kombinasi yang benar yang berfungsi. Jika situs web Anda memerlukan otentikasi pengguna, Anda adalah target yang baik untuk serangan brute-force.</p><p>Penyerang selalu dapat menemukan kata sandi melalui serangan brute-force, tetapi kerugiannya adalah bahwa perlu bertahun-tahun untuk menemukannya. Bergantung pada panjang dan kompleksitas kata sandi, mungkin ada triliunan kombinasi yang mungkin. Untuk sedikit mempercepat, serangan brute-force dapat dimulai dengan kata-kata kamus atau kata-kata kamus yang sedikit dimodifikasi karena kebanyakan orang akan menggunakannya daripada kata sandi yang sepenuhnya acak. Serangan-serangan ini disebut serangan kamus atau serangan brute-force hibrida. Serangan brute-force menempatkan akun pengguna dalam risiko dan membanjiri situs Anda dengan lalu lintas yang tidak perlu.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Bypass Mekanisme Perlindungan: Ketika otorisasi, otentikasi, atau mekanisme perlindungan lain bergantung pada entitas CAPTCHA untuk memastikan bahwa hanya aktor manusia yang dapat mengakses fungsionalitas tertentu, kemudian penyerang otomatis seperti bot dapat mengakses fungsionalitas terbatas dengan menebak captcha.</p></li><li><p>Ketersediaan: DOS: Konsumsi Sumber Daya (Lainnya): Pengguna dapat dikunci dari akun.</p></li><li><p>Kontrol Akses: Bypass Protection Mechanism: Seorang penyerang dapat melakukan jumlah upaya otentikasi yang sewenang -wenang menggunakan kata sandi yang berbeda, dan akhirnya mendapatkan akses ke akun yang ditargetkan.</p></li></ul>",
        "remediation": "<p>Buat sistem pertahanan yang cukup untuk menghentikan serangan. Pastikan bahwa kombinasi angka dan huruf dalam sistem captcha sulit diprediksi, dan tidak memberikan jawaban dalam salah satu tanggapan yang dikirim ke browser pengguna.</p><p>Memanfaatkan prosedur pembukaan akun sesuai dengan tingkat risiko. Dari yang paling berisiko ke yang paling aman:</p><ul><li><p>Memblokir dan membuka blokir berdasarkan waktu.</p></li><li><p>Unlocking menggunakan swalayan (mengirim email yang membuka blokir ke alamat email terdaftar).</p></li><li><p>Administrator membuka kunci dengan tangan.</p></li><li><p>Identifikasi Pengguna Positif untuk Unlocking Administrator Manual.</p></li><li><p>Memanfaatkan mekanisme swalayan: seperti yang disebutkan sebelumnya, mekanisme swalayan ini harus cukup aman untuk mencegah penyerang dapat membuka kunci akun sendiri.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism",
          "https://cwe.mitre.org/data/definitions/693.html"
        ],
        "locale": "en",
        "title": "Weakness in the second factor authentication mechanism (2FA).",
        "vulnType": "OWASP WSTG",
        "description": "<p>Mekanisme otentikasi dua faktor Nol Trust Security (2FA) adalah komponen utama. Anda harus mengonfirmasi bahwa pengguna yang mencoba mengakses data sensitif adalah siapa yang mereka klaim untuk melindunginya. Ancaman keamanan seperti phishing, serangan brute force, eksploitasi kredensial, dll. Yang menargetkan kata sandi dan akun pengguna dapat berhasil dipertahankan dengan 2FA.</p><p>Katakanlah Anda menyelesaikan otentikasi utama dalam aplikasi dengan nama pengguna dan kata sandi. Internet digunakan untuk mengirimkan informasi itu (jaringan utama). Akan lebih baik untuk menyelesaikan otentikasi dua faktor menggunakan saluran (out-of-band) yang berbeda. Otentikasi out-of-band mencakup hal-hal seperti menyetujui pemberitahuan push yang dikirim melalui jaringan seluler Anda.</p><p>Meskipun sangat dianjurkan, pendekatan ini dapat berbahaya jika tidak digunakan dengan benar.</p>",
        "observation": "<ul><li><p>Kontrol akses: Bypass Mekanisme Perlindungan: Aplikasi tidak menggunakan atau secara tidak benar menggunakan mekanisme perlindungan yang memberikan pertahanan yang cukup terhadap serangan terarah terhadap produk.</p></li></ul>",
        "remediation": "<p>Meskipun yang terbaik adalah menghilangkan SMS sebagai opsi 2FA saja, ini tidak membahas alasan untuk menambahkan 2FA di tempat pertama. Untuk menghindari brute force dan serangan lain yang menargetkan otentikasi kata sandi, beberapa bentuk 2FA diperlukan. Beberapa alternatif untuk 2FA SMS:</p><ul><li><p>Otentikasi perangkat keras. Otentikasi perangkat keras bergantung pada perangkat fisik khusus untuk memberikan akses. Selain kata sandi, pengguna harus memasukkan kode acak yang dihasilkan oleh perangkat. Login akan gagal tanpa kode. Vendor otentikasi perangkat keras termasuk RSA Securid dan Thales SafeNet.</p></li><li><p>Otentikasi Perangkat Lunak. Otentikasi perangkat lunak pada dasarnya mengikuti prinsip yang sama dengan otentikasi perangkat keras. Tetapi alih -alih membutuhkan perangkat fisik, kode token dihasilkan dengan aplikasi seluler. Aplikasi otentikasi paling populer adalah Google Authenticator, tetapi ada banyak opsi. Misalnya, RSA sekarang menawarkan authenticator aman sebagai aplikasi.</p></li><li><p>Otentikasi berbasis IP. Metode ini memeriksa alamat IP pengguna saat masuk. Anda dapat memblokir akses ke alamat IP tertentu yang diduga berbahaya, atau hanya mengizinkan login dari alamat dan rentang IP yang diketahui. Otentikasi berbasis IP dapat digunakan bersama dengan cara lain untuk menambahkan lapisan perlindungan lain.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/01-Test_Network_Infrastructure_Configuration",
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials",
          "https://cwe.mitre.org/data/definitions/521.html"
        ],
        "locale": "en",
        "title": "Default usernames and passwords",
        "vulnType": "OWASP WSTG",
        "description": "<p>Akun administratif bawaan memiliki kata sandi default pada banyak perangkat keras dan aplikasi web. Meskipun mereka kadang -kadang dapat dihasilkan secara acak, mereka sering statis, membuatnya mudah untuk menebak atau mendapatkannya.</p><p>Selain itu, kata sandi yang telah ditentukan mungkin ditetapkan untuk pengguna baru ketika dibuat dalam aplikasi. Ini dapat dihasilkan secara otomatis oleh aplikasi atau secara manual oleh staf. Kata sandi dalam kedua situasi rentan terhadap serangan menebak jika tidak dihasilkan dengan aman.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Penyerang dapat dengan mudah menebak kata sandi pengguna dan mendapatkan akun pengguna akses.</p></li></ul>",
        "remediation": "<p>Desain suatu produk harus memerlukan kepatuhan dengan kebijakan kata sandi yang sesuai. Persyaratan spesifik untuk kata sandi sangat bergantung pada faktor kontekstual, tetapi disarankan bahwa mereka berisi atribut berikut:</p><ol><li><p>Penegakan panjang minimum dan maksimum</p></li><li><p>Pembatasan terhadap penggunaan kembali kata sandi.</p></li><li><p>Pembatasan terhadap penggunaan kata sandi umum.</p></li><li><p>Pembatasan terhadap penggunaan string kontekstual dalam kata sandi (mis., ID pengguna, nama aplikasi).</p></li></ol><p>Bergantung pada model ancaman, kebijakan kata sandi dapat mencakup beberapa atribut tambahan.</p><p>Kata sandi kompleks yang membutuhkan set karakter campuran (alfabet, numerik, khusus, huruf besar dan kecil):</p><ul><li><p>Meningkatkan kisaran karakter membuat kata sandi lebih sulit untuk retak dan mungkin sesuai untuk sistem yang mengandalkan otentikasi faktor tunggal.</p></li><li><p>Sayangnya, kata sandi yang kompleks bisa sulit untuk dihafal, yang mendorong pengguna untuk memilih kata sandi pendek atau untuk salah mengelola kata sandi (tuliskan).</p></li><li><p>Kerugian lain dari pendekatan ini adalah bahwa ia sering tidak menghasilkan peningkatan yang signifikan dalam kompleksitas kata sandi secara keseluruhan karena penggunaan berbagai simbol yang dapat diprediksi orang.</p></li></ul><p>Panjang minimum yang luas:</p><ol><li><p>Meningkatkan jumlah karakter membuat kata sandi lebih sulit untuk retak dan mungkin sesuai untuk sistem yang bergantung pada otentikasi faktor tunggal.</p></li><li><p>Kerugian dari pendekatan ini adalah bahwa memilih frasa sandi yang baik tidak mudah dan kata sandi yang buruk masih dapat dihasilkan. Beberapa dorongan mungkin diperlukan untuk mendorong kata sandi yang panjang dan tidak dapat diprediksi.</p></li></ol><p>Kata sandi yang dihasilkan secara acak:</p><ol><li><p>Menghasilkan kata sandi untuk pengguna dapat membantu memastikan bahwa persyaratan panjang dan kompleksitas dipenuhi, dan dapat menghasilkan kata sandi yang kuat yang digunakan.</p></li><li><p>Kerugian dari pendekatan ini adalah bahwa kata sandi atau kunci yang dihasilkan mungkin terlalu sulit untuk dihafal, yang mendorong menuliskannya.</p></li></ol><p>Kata sandi kedaluwarsa:</p><ol><li><p>Membutuhkan perubahan kata sandi berkala dapat mengurangi jendela waktu penyerang harus memecahkan kata sandi, sambil membatasi kerusakan yang disebabkan oleh memperlihatkan kata sandi di tempat lain.</p></li><li><p>Kata sandi kedaluwarsa dapat menjadi teknik mitigasi yang baik ketika kata sandi yang panjang dan kompleks tidak diinginkan.</p></li></ol>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/04-Testing_for_Bypassing_Authentication_Schema",
          "https://cwe.mitre.org/data/definitions/288.html"
        ],
        "locale": "en",
        "title": "Login functionality bypass",
        "vulnType": "OWASP WSTG",
        "description": "<p>Dalam keamanan komputer, otentikasi adalah proses upaya untuk memverifikasi identitas digital pengirim komunikasi. Contoh umum dari ini adalah proses login. Menguji skema otentikasi berarti memahami bagaimana proses otentikasi bekerja dan menggunakan informasi itu untuk menghindari mekanisme otentikasi.</p><p>Meskipun sebagian besar aplikasi memerlukan otentikasi untuk mengakses informasi pribadi atau untuk menjalankan tugas, tidak semua metode otentikasi mampu memberikan keamanan yang memadai. Kelalaian, ketidaktahuan, atau perkiraan sederhana tentang ancaman keamanan sering kali menghasilkan skema otentikasi yang dapat dielakkan dengan hanya melewati halaman login dan memanggil langsung ke halaman internal yang seharusnya dapat diakses hanya setelah otentikasi dilakukan.</p><p>Selain itu, seringkali dimungkinkan untuk melewati langkah -langkah otentikasi dengan memanipulasi permintaan dan menipu aplikasi untuk berpikir bahwa pengguna sudah diautentikasi. Ini dapat dicapai dengan memodifikasi parameter URL yang diberikan, memanipulasi bentuk atau sesi spoofing.</p><p>Masalah yang terkait dengan skema otentikasi dapat ditemui pada berbagai tahap siklus hidup pengembangan perangkat lunak (SDLC), seperti fase desain, pengembangan dan penyebaran:</p><ul><li><p>Dalam fase desain kesalahan dapat mencakup definisi yang salah tentang bagian aplikasi yang akan dilindungi, memilih untuk tidak menerapkan protokol enkripsi yang kuat untuk mengamankan transmisi kredensial, dan banyak lagi.</p></li><li><p>Dalam fase pengembangan, kesalahan dapat mencakup implementasi yang salah dari fungsionalitas validasi input atau tidak mengikuti praktik terbaik keamanan untuk bahasa tertentu.</p></li><li><p>Pada fase penyebaran aplikasi, mungkin ada masalah selama konfigurasi aplikasi (kegiatan instalasi dan konfigurasi) karena kurangnya pengetahuan teknis yang diperlukan atau kurangnya dokumentasi yang baik.</p></li></ul>",
        "observation": "<ul><li><p>Kontrol Akses: Bypass Mekanisme Perlindungan: Penyerang dapat menggunakan jalur atau saluran alternatif yang tidak memerlukan otentikasi.</p></li></ul>",
        "remediation": "<p>Hanya pengguna yang diautentikasi yang dapat melihat halaman pribadi aplikasi.</p><p>Jelaskan secara rinci modifikasi yang diperlukan untuk mengatasi kerentanan dalam hal melewati fungsionalitas otentikasi.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses",
          "https://cwe.mitre.org/data/definitions/525.html"
        ],
        "locale": "en",
        "title": "Sensitive information stored in browser",
        "vulnType": "OWASP WSTG",
        "description": "<p>Aplikasi web tidak memiliki kebijakan caching yang tepat yang menetapkan tingkat caching yang harus dilakukan untuk setiap halaman web dan bidang formulir yang terkait.</p><p>Informasi dapat disimpan oleh browser untuk tujuan sejarah dan caching. Untuk meningkatkan kinerja, caching digunakan sehingga data yang diunduh sebelumnya tidak harus diunduh lagi. Untuk kenyamanan pengguna, mekanisme sejarah digunakan sehingga mereka dapat melihat dengan tepat apa yang dilihat ketika sumber daya diambil. Ketika data sensitif (seperti alamat Anda, nomor kartu kredit, nomor jaminan sosial, atau nama pengguna) ditampilkan kepada pengguna, data ini dapat di -cache atau disimpan untuk tujuan riwayat dan dengan demikian dapat diambil dengan melihat melalui cache browser atau hanya dengan menekan tombol kembali browser.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Gunakan kebijakan caching terbatas untuk formulir dan halaman web yang berpotensi mengandung informasi sensitif. Jangan menyimpan informasi sensitif yang tidak perlu di cache. Pertimbangkan untuk menggunakan enkripsi dalam cache. Bergantung pada apakah informasi ini disimpan dalam sejarah atau di -cache, tindakan berikut dapat diambil untuk mengurangi kerentanan:</p><p>Tombol kembali dapat dicegah untuk menampilkan data sensitif. Ini bisa dilakukan oleh:</p><p>Mengirim halaman melalui https.</p><p>Mengatur Cache-Control: Must-Revalidate</p><p>Untuk mencegah halaman yang mengandung informasi sensitif dari di -cache, perlu melakukan salah satu dari dua hal berikut:</p><p>Atur arahan \"cache-control: no-cache, no-store\" atau \"pragma: no-cache\" di header respons untuk halaman tersebut. Mantan:</p><p>Http/1.1:</p><p>Cache-Control: No-Cache, No-Store.</p><p>Http/1.0:</p><p>Pragma: No-cache (atau cache-control: no-cache).</p><p>Kedaluwarsa:<past (ex:=\"\" 0)=\"\" an=\"\" date=\"\" illegal=\"\" or=\"\" value=\"\"></past></p><p>Sertakan di setiap halaman HTML yang memiliki informasi sensitif kode berikut:</p><p>Http/1.1:</p><p><meta content=\"no-cache, no-store\" http-equiv=\"Cache-Control\"/></p><p>Http/1.0:</p><p><meta content=\"no-cache\" http-equiv=\"Pragma\"/></p><p><meta content=\"Sat, 01-Jan-2000 00:00:00GMT\" http-equiv=\"Expires\"/></p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities",
          "https://cwe.mitre.org/data/definitions/640.html"
        ],
        "locale": "en",
        "title": "Weaknesses in password change/reset functionality",
        "vulnType": "OWASP WSTG",
        "description": "<p>Mekanisme yang memungkinkan pengguna untuk mengakses akun mereka jika mereka lupa kata sandi mereka biasanya ada dalam aplikasi. Mekanisme pemulihan kata sandi sering tidak dapat diandalkan, yang meningkatkan kemungkinan seseorang selain pengguna sistem yang sah akan dapat mengakses akun pengguna tersebut. Skema otentikasi kata sandi yang kuat benar -benar dihancurkan oleh prosedur pemulihan kata sandi yang lemah.</p><p>Kelemahan ini mungkin ada karena pertanyaan keamanan yang terlalu mudah ditebak (mis., Karena pertanyaannya terlalu umum, atau jawabannya dapat ditemukan menggunakan jejaring sosial). Mungkin juga ada kelemahan implementasi dalam kode mekanisme pemulihan kata sandi yang mungkin, misalnya, menipu sistem agar mengirim email kata sandi baru ke akun email selain dari akun email pengguna. Tingkat reset kata sandi tidak dapat diatur, sehingga pengguna yang sah dapat ditolak layanan jika penyerang mencoba untuk memulihkan kata sandinya secara berurutan. Sistem dapat mengirim kata sandi asli ke pengguna alih -alih menghasilkan kata sandi sementara baru. Singkatnya, fungsi pemulihan kata sandi, jika tidak dirancang dan diimplementasikan dengan cermat, seringkali dapat menjadi tautan terlemah dalam sistem yang dapat disalahgunakan dengan cara yang memungkinkan penyerang untuk mendapatkan akses yang tidak sah ke sistem.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: penyerang bisa mendapatkan akses yang tidak sah ke sistem dengan mengambil kredensial otentikasi pengguna yang sah yang sah</p></li><li><p>Ketersediaan: DOS: Konsumsi Sumber Daya: Penyerang dapat menolak layanan kepada pengguna sistem yang sah dengan meluncurkan serangan brute force pada mekanisme pemulihan kata sandi menggunakan ID pengguna pengguna yang sah.</p></li><li><p>Lainnya: Lainnya: Fungsi keamanan sistem berbalik terhadap sistem oleh penyerang.</p></li></ul>",
        "remediation": "<p>Pastikan bahwa mekanisme pemulihan kata sandi telah secara menyeluruh menyaring dan memvalidasi setiap informasi yang diberikan pengguna.</p><ul><li><p>Gunakan beberapa pertanyaan keamanan daripada pertanyaan keamanan yang lemah.</p></li><li><p>Pastikan tidak ada terlalu banyak tanggapan yang salah terhadap pertanyaan keamanan. Setelah sejumlah jawaban yang salah (kecil), matikan fitur pemulihan kata sandi.</p></li><li><p>Menuntut agar pengguna menanggapi dengan benar pertanyaan keamanan sebelum mengizinkan mereka untuk mengatur ulang kata sandi mereka dan menerima kata sandi baru di alamat email yang mereka miliki di file.</p></li><li><p>Dalam mekanisme pemulihan kata sandi, jangan biarkan pengguna memilih alamat email yang akan dikirim kata sandi baru.</p></li><li><p>Berikan kata sandi sementara baru daripada berbagi yang lama.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities",
          "https://cwe.mitre.org/data/definitions/319.html",
          "https://cwe.mitre.org/data/definitions/311.html"
        ],
        "locale": "en",
        "title": "Credentials sent in clear text via email",
        "vulnType": "OWASP WSTG",
        "description": "<p>Kelemahan ini menyiratkan bahwa setelah pengguna memverifikasi identitas mereka, fungsi pendaftaran atau pemulihan kata sandi mengirimi mereka kata sandi. Ada dua alasan utama mengapa ini dianggap kurang aman:</p><p>Pengguna menerima kata sandi dalam bentuk yang tidak dienkripsi.</p><p>Pengguna dikunci dari akun mereka sampai mereka menerima email karena kata sandi akun diubah pada saat permintaan. Dimungkinkan untuk mencegah pengguna mengakses akun mereka dengan mengirim banyak permintaan.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat mendekripsi data menggunakan serangan brute force.</p></li></ul>",
        "remediation": "<p>Saat mengirim kata sandi melalui email, area berikut harus ditinjau:</p><ul><li><p>Apakah pengguna dipaksa untuk mengubah kata sandi setelah login pertama? Kata sandi baru dikirim melalui email yang tidak terenkripsi, dan dapat tetap berada di kotak masuk pengguna tanpa batas waktu jika pengguna tidak menghapus email. Oleh karena itu, pengguna harus diminta untuk mengubah kata sandi setelah login pertama.</p></li><li><p>Apakah kata sandi dihasilkan dengan aman? Kata sandi harus dihasilkan menggunakan generator bilangan pseudorandom (CSPRNG) yang aman secara kriptografis, dan harus cukup lama untuk mencegah serangan kata sandi atau serangan brute. Untuk pengalaman pengguna yang aman, itu harus dihasilkan menggunakan pendekatan gaya passphrase yang aman (mis., Menggabungkan banyak kata), daripada string karakter acak.</p></li><li><p>Apakah kata sandi pengguna saat ini dikirim? Alih -alih menghasilkan kata sandi baru untuk pengguna, beberapa aplikasi mengirim pengguna kata sandi mereka saat ini. Ini adalah metode yang sangat tidak aman, karena memperlihatkan kata sandi Anda saat ini melalui email yang tidak terenkripsi. Selain itu, jika situs dapat mengambil kata sandi yang ada, ini menyiratkan bahwa kata sandi disimpan menggunakan enkripsi reversibel, atau (lebih mungkin) dalam plaintext yang tidak terenkripsi, yang merupakan kelemahan keamanan yang serius.</p></li><li><p>Apakah email dikirim dari domain dengan perlindungan anti-spoofing? Domain harus mengimplementasikan SPF, DKIM dan DMARC untuk mencegah penyerang dari spoofing email yang datang darinya, yang dapat digunakan sebagai bagian dari serangan rekayasa sosial.</p></li><li><p>Apakah email dianggap cukup aman? Email sering dikirim tidak terenkripsi dan, dalam banyak kasus, akun email pengguna tidak akan dilindungi oleh MFA. Selain itu, dapat dibagikan di antara banyak individu, terutama di lingkungan perusahaan.</p></li></ul><p>Pertimbangkan apakah fungsi reset kata sandi berbasis email sesuai berdasarkan konteks aplikasi yang diuji.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/287.html"
        ],
        "locale": "en",
        "title": "Improper authentication",
        "vulnType": "OWASP WSTG",
        "description": "<p>Aplikasi tidak membuktikan atau tidak cukup membuktikan bahwa klaim aktor untuk memiliki identitas tertentu adalah benar.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Jalankan kode atau perintah yang tidak sah: Kelemahan ini dapat menyebabkan paparan sumber daya atau fungsionalitas kepada aktor yang tidak diinginkan, mungkin memberikan informasi sensitif kepada penyerang atau bahkan menjalankan kode sewenang -wenang.</p></li></ul>",
        "remediation": "<p>Memanfaatkan kerangka kerja atau perpustakaan untuk otentikasi, seperti fitur otentikasi OWASP ESAPI.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/285.html"
        ],
        "locale": "en",
        "title": "All authentication controls must fail securely",
        "vulnType": "OWASP WSTG",
        "description": "<p>Penanganan kesalahan yang aman adalah komponen penting dari pengkodean aman. Kesalahan dua khususnya memerlukan perhatian khusus. Kategori pertama adalah pengecualian yang muncul selama pemrosesan kontrol keamanan. Sangat penting bahwa pengecualian ini tidak mengizinkan tindakan yang biasanya dilarang oleh penanggulangan. Anda harus diingat sebagai pengembang bahwa mekanisme keamanan biasanya memiliki tiga hasil yang mungkin:</p><ul><li><p>Mengizinkan prosedur.</p></li><li><p>Mengizinkan operasi tidak.</p></li><li><p>Pengecualian secara umum, mekanisme keamanan Anda harus dibangun sehingga kegagalan akan memiliki efek yang sama dengan mematikan operasi.</p></li></ul>",
        "observation": "<ul><li><p>Kerahasiaan: Baca file atau direktori: Penyerang dapat membaca data sensitif, baik dengan membaca data langsung dari penyimpanan data yang tidak dibatasi dengan baik, atau dengan mengakses fungsionalitas istimewa yang tidak dilindungi dan tidak cukup untuk membaca data.</p></li><li><p>Integritas: Modifikasi file atau direktori: Penyerang dapat memodifikasi data sensitif, baik dengan menulis data langsung ke penyimpanan data yang tidak dibatasi dengan baik, atau dengan mengakses fungsionalitas istimewa yang tidak dilindungi dan tidak cukup untuk menulis data.</p></li><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Penyerang dapat memperoleh hak istimewa dengan memodifikasi atau membaca data penting secara langsung, atau dengan mengakses fungsionalitas istimewa yang dilindungi secara tidak cukup.</p></li></ul>",
        "remediation": "<p>Sebelum menggunakan sistem kontrol akses apa pun di aplikasi Anda, pastikan semuanya telah mengalami pengujian keamanan yang luas. Tes unit lengkap sering dibuat khusus untuk tujuan ini.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Authentication",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/310.html"
        ],
        "locale": "en",
        "title": "Cryptographic modules must fail securely - Padding Oracle Attack",
        "vulnType": "OWASP WSTG",
        "description": "<p>Ketika modul kriptografi gagal secara tidak aman, perangkat harus dimasukkan ke dalam keadaan kesalahan sehingga tidak lagi berfungsi.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mungkin dapat membaca informasi sensitif</p></li></ul>",
        "remediation": "<p>Kami menyarankan menempatkan modul kriptografi melalui tesnya sendiri menggunakan Standar Institut Standar dan Teknologi Nasional (NIST) untuk melihat apakah gagal dengan aman.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Authorization",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include",
          "https://cwe.mitre.org/data/definitions/22.html"
        ],
        "locale": "en",
        "title": "Path Traversal",
        "vulnType": "OWASP WSTG",
        "description": "<p>Kerentanan \"Path Traversal\" memungkinkan pengguna untuk mengakses file atau direktori yang terletak di tempat lain pada sistem dengan melarikan diri dari area terbatas. Dimungkinkan untuk mengakses file dan direktori yang disimpan dalam sistem file dengan menyesuaikan variabel yang merujuk pada file dengan urutan \"dot-dot-slash (../)\" dan variasinya.</p>",
        "observation": "<ul><li><p>Integritas: Jalankan kode atau perintah yang tidak sah: Penyerang mungkin dapat membuat atau menimpa file kritis yang digunakan untuk menjalankan kode, seperti program atau perpustakaan.</p></li><li><p>Kerahasiaan: Jalankan kode atau perintah yang tidak sah: Penyerang mungkin dapat membuat atau menimpa file kritis yang digunakan untuk menjalankan kode, seperti program atau perpustakaan.</p></li><li><p>Ketersediaan: Jalankan kode atau perintah yang tidak sah: Penyerang mungkin dapat membuat atau menimpa file kritis yang digunakan untuk menjalankan kode, seperti program atau perpustakaan.</p></li><li><p>Integritas: Modifikasi file atau direktori: Penyerang mungkin dapat menimpa atau membuat file penting, seperti program, perpustakaan, atau data penting. Jika file yang ditargetkan digunakan untuk mekanisme keamanan, maka penyerang mungkin dapat memotong mekanisme itu. Misalnya, menambahkan akun baru di akhir file kata sandi dapat memungkinkan penyerang untuk memotong otentikasi.</p></li><li><p>Kerahasiaan: Baca file atau direktori: Penyerang mungkin dapat membaca konten file yang tidak terduga dan mengekspos data sensitif. Jika file yang ditargetkan digunakan untuk mekanisme keamanan, maka penyerang mungkin dapat memotong mekanisme itu. Misalnya, dengan membaca file kata sandi, penyerang dapat melakukan serangan menebak kata sandi brute untuk masuk ke akun pada sistem.</p></li><li><p>Ketersediaan: DOS: Kecelakaan, keluar, atau restart: Penyerang mungkin dapat menimpa, menghapus, atau merusak file -file kritis yang tidak terduga seperti program, perpustakaan, atau data penting. Ini dapat mencegah perangkat lunak bekerja sama sekali dan dalam hal mekanisme perlindungan seperti otentikasi, ia memiliki potensi untuk mengunci setiap pengguna perangkat lunak.</p></li></ul>",
        "remediation": "<p>Gunakan strategi validasi input data, atau daftar input yang sepenuhnya sesuai dengan persyaratan, dan menolak input apa pun yang tidak memenuhi persyaratan tersebut.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Authorization",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References",
          "https://cwe.mitre.org/data/definitions/706.html",
          "https://cwe.mitre.org/data/definitions/813.html"
        ],
        "locale": "en",
        "title": "IDOR (Insecure Direct Object References)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Ketika suatu aplikasi memberikan akses langsung ke objek berdasarkan input dari pengguna, ini dikenal sebagai \"referensi objek langsung yang tidak aman\" (IDOR). Kerentanan ini memungkinkan penyerang untuk memotong otentikasi dan mendapatkan akses langsung ke sumber daya sistem, seperti file atau catatan basis data. Dengan mengubah nilai parameter yang digunakan untuk menunjuk langsung ke suatu objek, penyerang dapat mem -bypass otentikasi dan mendapatkan akses tidak terbatas ke sumber daya. Sumber daya ini dapat mencakup file sistem, entri basis data pengguna lain, dll. Ini terjadi karena aplikasi menggunakan input yang disediakan pengguna untuk mengambil objek tanpa melakukan pemeriksaan otorisasi yang cukup.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Bypass Protection Mechanism: Seorang penyerang dapat melakukan jumlah upaya otentikasi yang sewenang -wenang menggunakan kata sandi yang berbeda, dan akhirnya mendapatkan akses ke akun yang ditargetkan.</p></li><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Eskalasi hak istimewa horizontal dimungkinkan (satu pengguna dapat melihat/memodifikasi informasi dari pengguna lain).</p></li><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Eskalasi vertikal hak istimewa dimungkinkan jika kunci yang dikendalikan pengguna sebenarnya adalah bendera yang menunjukkan status administrator, memungkinkan penyerang untuk mendapatkan akses administratif.</p></li></ul>",
        "remediation": "<p>Avert menampilkan referensi ke item rahasia seperti nama file atau kunci.</p><p>Sisi server harus mengimplementasikan validasi parameter dan verifikasi objek dengan benar untuk semua referensi.</p><p>Token harus dibuat dengan cara yang membatasi penugasan mereka kepada pengguna dan mencegah mereka dibagikan kepada publik.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Authorization",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/306.html"
        ],
        "locale": "en",
        "title": "Principle of least privilege",
        "vulnType": "OWASP WSTG",
        "description": "<p>Menurut prinsip hak istimewa paling tidak, akun harus memiliki hak istimewa paling sedikit yang diperlukan untuk melakukan operasi bisnis mereka. Ini termasuk hak pengguna serta jaringan, sistem file, dan izin sumber daya seperti CPU dan cap memori.</p>",
        "observation": "<ul><li><p>Lainnya: Lainnya: Mengekspos fungsionalitas kritis pada dasarnya memberikan penyerang dengan tingkat hak istimewa fungsionalitas itu. Konsekuensinya akan tergantung pada fungsionalitas terkait, tetapi mereka dapat berkisar dari membaca atau memodifikasi data sensitif, akses ke fungsi administratif atau istimewa lainnya, atau bahkan mungkin eksekusi kode sewenang -wenang.</p></li></ul>",
        "remediation": "<ul><li><p>Prinsip ini berarti memberikan akun pengguna hanya hak istimewa yang penting untuk pekerjaan pengguna tersebut. Misalnya, pengguna cadangan tidak perlu menginstal perangkat lunak: karenanya, pengguna cadangan hanya memiliki hak untuk menjalankan aplikasi terkait cadangan dan cadangan. Hak istimewa lainnya, seperti menginstal perangkat lunak baru, diblokir.</p></li><li><p>Prinsip ini berlaku juga untuk pengguna komputer pribadi yang biasanya bekerja di akun pengguna normal, dan membuka akun yang dilindungi kata sandi yang istimewa (yaitu, superuser) hanya ketika situasi benar -benar menuntutnya.</p></li><li><p>Prinsip ini juga dapat diterapkan pada aplikasi web Anda. Alih-alih semata-mata tergantung pada metode otentikasi berbasis peran menggunakan sesi, kami lebih suka memberikan hak istimewa kepada pengguna melalui sistem otentikasi berbasis basis data.</p></li></ul><p>Kami masih menggunakan sesi untuk mengidentifikasi apakah pengguna masuk dengan benar, hanya sekarang alih -alih menugaskan pengguna itu dengan peran spesifik yang kami berikan kepadanya dengan hak istimewa untuk memverifikasi tindakan mana yang ia miliki untuk melakukan yang lebih baik pada sistem. Juga, seorang pro besar dari metode ini, kapan pun pengguna harus ditugaskan lebih sedikit.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Authorization",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/285.html"
        ],
        "locale": "en",
        "title": "Improper Authorization",
        "vulnType": "OWASP WSTG",
        "description": "<p>Ketika seorang aktor mencoba mengakses sumber daya atau melakukan tindakan, perangkat lunak tidak melakukan atau secara tidak benar melakukan pemeriksaan otorisasi. Berdasarkan hak istimewa pengguna dan izin apa pun atau persyaratan kontrol akses lainnya yang berlaku untuk sumber daya, otorisasi adalah proses menentukan apakah pengguna dengan identitas yang diberikan dapat mengakses sumber daya tertentu.</p><p>Pengguna dapat mengakses data atau melakukan tindakan yang seharusnya tidak dapat dilakukan ketika pemeriksaan kontrol akses tidak diterapkan secara konsisten, atau sama sekali. Sejumlah masalah, seperti paparan informasi, penolakan serangan layanan, dan eksekusi kode sewenang -wenang, dapat dihasilkan dari ini.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca file atau direktori: Penyerang dapat membaca data sensitif, baik dengan membaca data langsung dari penyimpanan data yang tidak dibatasi dengan baik, atau dengan mengakses fungsionalitas istimewa yang tidak dilindungi dan tidak cukup untuk membaca data.</p></li><li><p>Integritas: Modifikasi file atau direktori: Penyerang dapat memodifikasi data sensitif, baik dengan menulis data langsung ke penyimpanan data yang tidak dibatasi dengan baik, atau dengan mengakses fungsionalitas istimewa yang tidak dilindungi dan tidak cukup untuk menulis data.</p></li><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Penyerang dapat memperoleh hak istimewa dengan memodifikasi atau membaca data penting secara langsung, atau dengan mengakses fungsionalitas istimewa yang dilindungi secara tidak cukup.</p></li></ul>",
        "remediation": "<p>Arsitektur dan Desain</p><ul><li><p>Bagilah perangkat lunak menjadi area anonim, normal, istimewa, dan administrasi. Kurangi permukaan serangan dengan memetakan peran dengan hati -hati dengan data dan fungsionalitas. Gunakan Kontrol Akses Berbasis Peran (RBAC) untuk menegakkan peran pada batasan yang sesuai.</p></li></ul><p>Perhatikan bahwa pendekatan ini mungkin tidak melindungi terhadap otorisasi horizontal, yaitu, ia tidak akan melindungi pengguna dari menyerang orang lain dengan peran yang sama.</p><ul><li><p>Pastikan Anda melakukan pemeriksaan kontrol akses yang terkait dengan logika bisnis Anda. Pemeriksaan ini mungkin berbeda dari pemeriksaan kontrol akses yang Anda berlaku untuk sumber daya yang lebih umum seperti file, koneksi, proses, memori, dan catatan basis data. Misalnya, database dapat membatasi akses untuk catatan medis ke pengguna database tertentu, tetapi setiap catatan mungkin hanya dimaksudkan agar dapat diakses oleh pasien dan dokter pasien.</p></li><li><p>Gunakan perpustakaan atau kerangka kerja yang diperiksa yang tidak memungkinkan kelemahan ini terjadi atau menyediakan konstruksi yang membuat kelemahan ini lebih mudah dihindari.</p></li><li><p>Misalnya, pertimbangkan untuk menggunakan kerangka kerja otorisasi seperti Kerangka Otorisasi JAAS Ref-233 dan Fitur Kontrol Akses OWASP ESAPI Ref-45.</p></li><li><p>Untuk aplikasi web, pastikan bahwa mekanisme kontrol akses ditegakkan dengan benar di sisi server di setiap halaman. Pengguna tidak boleh mengakses fungsi atau informasi yang tidak sah dengan hanya meminta akses langsung ke halaman itu.</p></li><li><p>Salah satu cara untuk melakukan ini adalah dengan memastikan bahwa semua halaman yang berisi informasi sensitif tidak di -cache, dan bahwa semua halaman tersebut membatasi akses ke permintaan yang disertai dengan token sesi yang aktif dan diautentikasi yang terkait dengan pengguna yang memiliki izin yang diperlukan untuk mengakses halaman tersebut.</p></li></ul><p>Konfigurasi Sistem: Instalasi</p><ul><li><p>Gunakan kemampuan kontrol akses dari sistem operasi dan lingkungan server Anda dan tentukan daftar kontrol akses Anda sesuai. Gunakan kebijakan \"Default Deny\" saat mendefinisikan ACL ini.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema",
          "https://cwe.mitre.org/data/definitions/1018.html",
          "https://owasp.org/www-community/attacks/Session_Prediction"
        ],
        "locale": "en",
        "title": "Predictable session ID",
        "vulnType": "OWASP WSTG",
        "description": "<p>Tujuan utama dari serangan prediksi sesi adalah untuk memperkirakan nilai ID sesi yang memungkinkan penyerang untuk mengatasi proses otentikasi aplikasi. Penyerang dapat memprediksi nilai ID sesi yang valid dan mendapatkan akses ke aplikasi dengan menyelidiki dan memahami proses pembuatan ID sesi.</p><p>Pertama, penyerang perlu mengumpulkan beberapa nilai ID sesi yang valid yang digunakan untuk mengidentifikasi pengguna yang diautentikasi. Selanjutnya, ia perlu memahami struktur ID sesi, informasi yang digunakan untuk membuatnya, dan algoritma enkripsi atau hashing yang digunakan oleh aplikasi untuk melindunginya. Beberapa implementasi yang buruk menggunakan ID sesi yang terdiri dari nama pengguna atau informasi lain yang dapat diprediksi, seperti cap waktu klien atau alamat IP. Dalam kasus terburuk, informasi ini digunakan dalam teks yang jelas atau dikodekan menggunakan beberapa algoritma lemah seperti pengkodean base64.</p><p>Juga, penyerang dapat menerapkan teknik brute-force untuk menghasilkan dan menguji nilai ID sesi yang berbeda sampai ia mendapatkan akses ke aplikasi.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Bypass Protection Mechanism: Seorang penyerang dapat tetap dicatat lama, yang dapat menggunakan kembali ID lama atau dihapus dan referensi langsung.</p></li></ul>",
        "remediation": "<p>Dengan menggunakan hash dan variabel yang tidak dapat diulang seperti cap waktu, sesi yang tidak dapat diprediksi harus dihasilkan.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/614.html https://cwe.mitre.org/data/definitions/1004.html",
          "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies",
          "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"
        ],
        "locale": "en",
        "title": "Secure attribute missing in cookies",
        "vulnType": "OWASP WSTG",
        "description": "<p>Atribut yang aman dan atribut httponly digunakan untuk memastikan bahwa cookie dikirim dengan aman dan tidak dapat diakses oleh skrip atau pihak yang tidak diinginkan. Cookie dengan atribut aman hanya pernah dikirim ke server bersama dengan permintaan HTTPS terenkripsi. JavaScript API tidak dapat mengakses cookie dengan atribut httponly; Sebaliknya, server menerimanya sebagai gantinya.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang yang melakukan scripting lintas situs yang sukses atau serangan man-in-the-middle akan dapat membaca isi dari cookie dan informasi yang diperoleh.</p></li></ul>",
        "remediation": "<p>Baik atribut httpOnly dan aman harus digunakan oleh server saat mengatur cookie untuk mengurangi kerentanan ini. Ilustrasi disediakan di bawah ini:</p><p>Set-Cookie: cookie1 = info1; Aman; Httponly</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/614.html https://cwe.mitre.org/data/definitions/1004.html",
          "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies",
          "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"
        ],
        "locale": "en",
        "title": "HTTP Only attribute missing in cookies",
        "vulnType": "OWASP WSTG",
        "description": "<p>Atribut yang aman dan atribut httponly digunakan untuk menjamin bahwa cookie dikirim dengan aman dan tidak dapat diakses oleh individu atau skrip yang tidak sah. Hanya permintaan terenkripsi yang dibuat menggunakan protokol HTTPS dan tidak pernah HTTP tanpa jaminan diizinkan untuk mengirim cookie dengan atribut aman ke server. JavaScript API tidak dapat mengakses cookie dengan atribut httponly karena hanya dikirim ke server.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Jika bendera httponly tidak diatur, maka informasi sensitif yang disimpan dalam cookie dapat terpapar dengan pihak yang tidak diinginkan.</p></li><li><p>Integritas: Dapatkan hak istimewa atau anggap identitas: Jika cookie yang dimaksud adalah cookie otentikasi, maka tidak mengatur bendera httponly dapat memungkinkan musuh untuk mencuri data otentikasi (mis., ID sesi) dan mengasumsikan identitas pengguna.</p></li></ul>",
        "remediation": "<p>Baik atribut httpOnly dan aman harus digunakan oleh server saat mengatur cookie untuk mengurangi kerentanan ini. Ilustrasi disediakan di bawah ini:</p><p>Set-Cookie: cookie1 = info1; Aman; Httponly</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes",
          "https://cwe.mitre.org/data/definitions/1275.html",
          "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html",
          "https://cwe.mitre.org/data/definitions/1275.html"
        ],
        "locale": "en",
        "title": "SameSite attribute missing in cookies",
        "vulnType": "OWASP WSTG",
        "description": "<p>Telah ditemukan bahwa cookie yang dibuat oleh aplikasi tidak memanfaatkan mekanisme perlindungan samesite pada saat akses situs web. Perlindungan ini mencegah potensi serangan cross-site everest-situs (CSRF) dengan mengatur bagaimana cookie dikirim dalam permintaan ke domain lain.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Modifikasi Data Aplikasi: Jika Situs Web tidak memberlakukan pertahanan tambahan terhadap serangan CSRF, gagal menggunakan nilai -nilai 'LAX' atau 'ketat' dapat meningkatkan risiko paparan serangan CSRF. Kemungkinan pelanggaran integritas rendah karena serangan yang berhasil tidak hanya bergantung pada atribut Samesite yang tidak aman. Untuk melakukan serangan CSRF ada banyak kondisi yang harus dipenuhi, seperti kurangnya token CSRF, tidak ada konfirmasi untuk tindakan sensitif di situs web, header \"tipe konten\" sederhana \"dalam permintaan HTTP dan banyak lagi.</p></li></ul>",
        "remediation": "<p>Jika memungkinkan, disarankan untuk membuat cookie dengan atribut 'Samesite' yang diatur ke nilai 'ketat'.</p><p>Set-Cookie:<cookie>=<value>; Jalur =/; Kedaluwarsa =<date>; Domain =<domain>; Aman; Httponly; Samesite = ketat</domain></date></value></cookie></p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes",
          "https://cwe.mitre.org/data/definitions/613.html"
        ],
        "locale": "en",
        "title": "Application cookies have an excessive or indefinite expiration time.",
        "vulnType": "OWASP WSTG",
        "description": "<p>Atribut kedaluwarsa digunakan untuk:</p><ul><li><p>Atur cookie yang gigih.</p></li><li><p>Batasi seumur hidup jika sesi hidup terlalu lama.</p></li><li><p>Hapus cookie secara paksa dengan mengaturnya ke kencan di masa lalu.</p></li></ul><p>Tidak seperti cookie sesi, cookie yang gigih akan digunakan oleh browser sampai cookie berakhir. Setelah tanggal kedaluwarsa melewati waktu yang ditentukan, browser akan menghapus cookie.</p><p>Kurangnya kedaluwarsa sesi yang tepat dapat meningkatkan kemungkinan keberhasilan serangan tertentu. Misalnya, penyerang dapat mencegat ID sesi, mungkin melalui sniffer jaringan atau serangan scripting lintas situs. Sementara waktu kedaluwarsa sesi pendek tidak membantu jika token curian digunakan segera, mereka akan melindungi terhadap replay terus menerus dari ID sesi. Dalam skenario lain, pengguna dapat mengakses situs web dari komputer bersama (seperti di perpustakaan, kafe internet, atau lingkungan kerja terbuka). Tidak cukupnya sesi kedaluwarsa dapat memungkinkan penyerang menggunakan tombol kembali browser untuk mengakses halaman web yang sebelumnya diakses oleh korban.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Bypass Protection Mechanism: Seorang penyerang dapat tetap dicatat lama, yang dapat menggunakan kembali ID lama atau dihapus dan referensi langsung.</p></li></ul>",
        "remediation": "<p>Hanya cookie persisten yang diatur menggunakan atribut itu sendiri. Namun, penting untuk memeriksa bahwa tidak ada data sensitif dalam cookie yang persisten. Misalnya, jika cookie persisten digunakan untuk menyimpan informasi yang diperlukan untuk otentikasi pengguna, penyerang dengan akses ke cookie dapat menggunakannya untuk membuktikan identitas mereka ke aplikasi.</p><p>Oleh karena itu, kita harus memastikan bahwa cookie yang berisi informasi sensitif tidak memiliki set atribut 'kedaluwarsa'.</p><p>Di sisi lain, disarankan untuk menetapkan waktu kedaluwarsa singkat untuk menurunkan kemungkinan bahwa penyerang potensial akan menggunakan kembali mereka.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-community/Session_Timeout"
        ],
        "locale": "en",
        "title": "Insufficient Session Expiration",
        "vulnType": "OWASP WSTG",
        "description": "<p>Cookie sesi unik pengguna yang diautentikasi, yang biasanya digunakan oleh aplikasi web, harus dikonfigurasi dengan seumur hidup sehingga mereka kedaluwarsa setelah jumlah waktu maksimum. Karena itu, jika pengguna masuk pada komputer lain tanpa secara manual mengakhiri sesi mereka, pengguna lain yang masuk pada komputer itu dan mengakses aplikasi akan terus berada di sesi pengguna yang diautentikasi sebelumnya.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Bypass Protection Mechanism: Seorang penyerang dapat tetap dicatat lama, yang dapat menggunakan kembali ID lama atau dihapus dan referensi langsung.</p></li></ul>",
        "remediation": "<p>Kurangi waktu kedaluwarsa sesi.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/03-Testing_for_Session_Fixation",
          "https://cwe.mitre.org/data/definitions/384.html"
        ],
        "locale": "en",
        "title": "Session Fixation",
        "vulnType": "OWASP WSTG",
        "description": "<p>Mengotentikasi pengguna, atau membangun sesi pengguna baru, tanpa membatalkan pengidentifikasi sesi yang ada, memberikan kesempatan kepada penyerang untuk mencuri sesi yang diautentikasi.</p><p>Skenario ini umumnya diamati ketika:</p><ol><li><p>Aplikasi web mengotentikasi pengguna tanpa terlebih dahulu membatalkan sesi yang ada, sehingga melanjutkan sesi yang sudah terkait dengan pengguna.</p></li><li><p>Penyerang dapat memaksa pengidentifikasi sesi yang diketahui pada pengguna sehingga, begitu pengguna mengotentikasi, penyerang memiliki akses ke sesi yang diautentikasi.</p></li><li><p>Aplikasi atau wadah menggunakan pengidentifikasi sesi yang dapat diprediksi. Dalam eksploitasi generik dari kerentanan fiksasi sesi, penyerang membuat sesi baru dalam aplikasi web dan mendaftarkan pengidentifikasi sesi terkait. Penyerang kemudian memiliki rekan korban, dan mungkin mengotentikasi, terhadap server menggunakan pengidentifikasi sesi itu, memberikan akses penyerang ke akun pengguna melalui sesi aktif.</p></li></ol>",
        "observation": "<ul><li><p>Kontrol Akses: Bypass Protection Mechanism: Seorang penyerang dapat tetap dicatat lama, yang dapat menggunakan kembali ID lama atau dihapus dan referensi langsung.</p></li></ul>",
        "remediation": "<p>Penanggulangan untuk kerentanan fiksasi sesi adalah untuk membuat kode hard aplikasi sedemikian rupa sehingga mencegah aplikasi menerima token yang telah dipaksa ke dalam sesi korban.</p><p>Langkah -langkah berikut memberikan cara yang kuat untuk mengamankan aplikasi web terhadap serangan ini:</p><ul><li><p>Jangan menerima pengidentifikasi sesi di parameter GET atau POST. Ini membuatnya jauh lebih sulit untuk dieksploitasi oleh penyerang, karena lebih mudah untuk menipu korban agar membuat permintaan tanpa kerentanan browser. Selain itu, semua ID sesi harus dihasilkan oleh server; Seharusnya tidak perlu klien untuk mengusulkan ID sesi baru untuk aplikasi.</p></li><li><p>Ubah ID sesi setelah login. Server harus menghasilkan ID sesi baru dan mengaturnya sebagai cookie setelah pengguna masuk. Sesi apa pun yang ada untuk pengguna harus dihancurkan di server.</p></li><li><p>Berikan fungsi logout dan kedaluwarsa sesi lama. Pengguna harus dapat memilih kapan harus mengakhiri sesi mereka dengan aplikasi, yang harus segera mengakhiri sesi saat ini di server dan tidak hanya menghapus cookie dari browser. Data sesi juga harus kedaluwarsa secara otomatis setelah periode tertentu, untuk mengurangi waktu penyerang dapat menggunakan sesi yang dikompromikan.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery",
          "https://cwe.mitre.org/data/definitions/352.html"
        ],
        "locale": "en",
        "title": "Cross-site Request Forgery (CSRF)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Serangan CSRF bertujuan untuk menipu pengguna agar secara tanpa disadari menjalankan fungsionalitas dalam aplikasi web yang rentan yang akan bermanfaat bagi penyerang dan merugikan pengguna yang terkena dampak.</p><p>Secara khusus, serangan dilakukan dengan memaksa browser pengguna yang tidak curiga untuk mengajukan permintaan ke situs web yang rentan, permintaan yang akan dilakukan pengguna tanpa menyadarinya, dan berhasil selama pengguna masuk ke situs web karena kredensial yang sudah ditetapkan (ID sesi, cookie, ...) akan digunakan secara otomatis.</p><p>Tidak seperti serangan XSS, yang mengeksploitasi kepercayaan yang dimiliki pengguna di situs tertentu, pemalsuan permintaan lintas situs mengeksploitasi kepercayaan yang dimiliki suatu situs pada pengguna tertentu. Ini adalah kerentanan otentikasi yang tidak mencukupi di mana aplikasi tidak memvalidasi asal permintaan.</p>",
        "observation": "<ul><li><p>Kontrol akses: DOS: Kecelakaan, keluar, atau restart: Konsekuensinya akan bervariasi tergantung pada sifat fungsionalitas yang rentan terhadap CSRF. Seorang penyerang dapat secara efektif melakukan operasi apa pun sebagai korban. Jika korban adalah administrator atau pengguna istimewa, konsekuensinya dapat mencakup mendapatkan kontrol penuh atas aplikasi web - menghapus atau mencuri data, menghapus pemasangan produk, atau menggunakannya untuk meluncurkan serangan lain terhadap semua pengguna produk. Karena penyerang memiliki identitas korban, ruang lingkup CSRF hanya dibatasi oleh hak istimewa korban.</p></li></ul>",
        "remediation": "<p>Untuk menghindari serangan pemalsuan permintaan lintas situs, perlu bahwa setiap permintaan yang dibuat ke situs web berisi pengidentifikasi unik (token sinkronisasi), yang harus menjadi parameter yang tidak dapat diketahui oleh penyerang.</p><p>Misalnya, disarankan untuk mengirimkan parameter pengidentifikasi sesi pengguna yang sah. Server harus memeriksa parameter ini sebagai cara memvalidasi bahwa memang pengguna saat ini yang meminta operasi saat ini.</p><p>Selain itu, interaksi pengguna dapat diminta untuk transaksi sensitif sebagai bentuk otentikasi ganda atau dengan menanggapi captcha.</p><p>Juga, header referer dalam permintaan klien harus diperiksa untuk memastikan bahwa setiap permintaan berasal dari situs asli dan bukan dari sumber eksternal. Mitigasi ini, meskipun perlu, dapat dilewati oleh penyerang menggunakan jenis kerentanan lain seperti XSS.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery",
          "https://cwe.mitre.org/data/definitions/352.html"
        ],
        "locale": "en",
        "title": "Absence of token anti-CSRF",
        "vulnType": "OWASP WSTG",
        "description": "<p>Serangan CSRF bertujuan untuk menipu pengguna agar secara tanpa disadari menjalankan fungsionalitas dalam aplikasi web yang rentan yang akan bermanfaat bagi penyerang dan merugikan pengguna yang terkena dampak.</p><p>Secara khusus, serangan dilakukan dengan memaksa browser pengguna yang tidak curiga untuk mengajukan permintaan ke situs web yang rentan, permintaan yang akan dilakukan pengguna tanpa menyadarinya, dan berhasil selama pengguna masuk ke situs web karena kredensial yang sudah ditetapkan (ID sesi, cookie, ...) akan digunakan secara otomatis.</p><p>Tidak seperti serangan XSS, yang mengeksploitasi kepercayaan yang dimiliki pengguna di situs tertentu, pemalsuan permintaan lintas situs mengeksploitasi kepercayaan yang dimiliki suatu situs pada pengguna tertentu. Ini adalah kerentanan otentikasi yang tidak mencukupi di mana aplikasi tidak memvalidasi asal permintaan.</p>",
        "observation": "<ul><li><p>Kontrol akses: DOS: Kecelakaan, keluar, atau restart: Konsekuensinya akan bervariasi tergantung pada sifat fungsionalitas yang rentan terhadap CSRF. Seorang penyerang dapat secara efektif melakukan operasi apa pun sebagai korban. Jika korban adalah administrator atau pengguna istimewa, konsekuensinya dapat mencakup mendapatkan kontrol penuh atas aplikasi web - menghapus atau mencuri data, menghapus pemasangan produk, atau menggunakannya untuk meluncurkan serangan lain terhadap semua pengguna produk. Karena penyerang memiliki identitas korban, ruang lingkup CSRF hanya dibatasi oleh hak istimewa korban.</p></li></ul>",
        "remediation": "<p>Aplikasi harus diperbarui untuk memasukkan dukungan token anti-CSRF untuk segala bentuk sensitif yang dapat diakses selama sesi yang diautentikasi.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/06-Testing_for_Logout_Functionality",
          "https://cwe.mitre.org/data/definitions/287.html"
        ],
        "locale": "en",
        "title": "Weaknesses in the logout process.",
        "vulnType": "OWASP WSTG",
        "description": "<p>Mekanisme logout pengguna aplikasi diimplementasikan secara tidak tepat.</p><p>Pengguna dapat berinteraksi dengan aplikasi lagi tanpa harus memasukkan informasi login mereka lagi karena sesi tersebut tidak dibatalkan dengan benar.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Jalankan kode atau perintah yang tidak sah: Kelemahan ini dapat menyebabkan paparan sumber daya atau fungsionalitas kepada aktor yang tidak diinginkan, mungkin memberikan informasi sensitif kepada penyerang atau bahkan menjalankan kode sewenang -wenang.</p></li></ul>",
        "remediation": "<p>Disarankan agar tombol logout hadir di semua halaman aplikasi, bahwa itu membatalkan sesi pada klien dan server, dan bahwa server menolak koneksi lebih lanjut yang dibuat dengan token yang sama.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/07-Testing_Session_Timeout",
          "https://cwe.mitre.org/data/definitions/1018.html"
        ],
        "locale": "en",
        "title": "Weaknesses in the logout process due to inactivity.",
        "vulnType": "OWASP WSTG",
        "description": "<p>Semua aplikasi harus mengimplementasikan batas waktu tidak aktif untuk sesi. Timeout ini menentukan jumlah waktu sesi akan tetap aktif jika tidak ada aktivitas pengguna, menutup dan membatalkan sesi setelah periode tidak aktif yang ditentukan karena permintaan HTTP terakhir yang diterima oleh aplikasi web untuk ID sesi yang diberikan. Batas waktu yang paling sesuai harus menjadi keseimbangan antara keamanan (batas waktu yang lebih pendek) dan kegunaan (waktu tunggu lebih lama) dan sebagian besar tergantung pada tingkat sensitivitas data yang ditangani oleh aplikasi. Misalnya, waktu logout 60 menit untuk forum publik mungkin dapat diterima, tetapi waktu yang lama akan terlalu lama dalam aplikasi perbankan rumah (di mana waktu tunggu maksimum 15 menit direkomendasikan). Dalam kasus apa pun, aplikasi apa pun yang tidak menegakkan logout berbasis batas waktu harus dianggap tidak aman, kecuali jika perilaku tersebut diperlukan oleh persyaratan fungsional tertentu.</p><p>Timeout membatasi kemungkinan penyerang untuk menebak dan menggunakan ID sesi yang valid dari pengguna lain, dan dalam keadaan tertentu dapat melindungi komputer publik dari penggunaan kembali sesi. Namun, jika penyerang dapat membajak sesi yang diberikan, batas waktu tidak aktif tidak membatasi tindakan penyerang, karena ia dapat menghasilkan aktivitas dalam sesi secara berkala untuk menjaga sesi tetap aktif untuk jangka waktu yang lebih lama.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Bypass Protection Mechanism: Seorang penyerang dapat tetap dicatat lama, yang dapat menggunakan kembali ID lama atau dihapus dan referensi langsung.</p></li></ul>",
        "remediation": "<p>Sisi server harus mengimplementasikan manajemen batas waktu dan kedaluwarsa sesi. Seorang penyerang dapat memanipulasi data yang dikendalikan klien yang digunakan untuk menegakkan batas waktu sesi, seperti nilai cookie atau parameter klien lain yang melacak referensi waktu (seperti jumlah menit sejak waktu login), untuk memperpanjang sesi. Akibatnya, aplikasi harus memantau waktu idle sisi server dan, setelah periode batas waktu berlalu, secara otomatis membatalkan sesi pengguna saat ini dan menghapus semua data sisi klien.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/09-Testing_for_Session_Hijacking",
          "https://capec.mitre.org/data/definitions/593.html"
        ],
        "locale": "en",
        "title": "Session Hijacking",
        "vulnType": "OWASP WSTG",
        "description": "<p>Serangan pembajakan sesi terdiri dari mengeksploitasi mekanisme kontrol sesi web, yang biasanya dikelola untuk token sesi.</p><p>Karena komunikasi HTTP menggunakan banyak koneksi TCP yang berbeda, server web membutuhkan metode untuk mengenali koneksi setiap pengguna. Metode yang paling berguna bergantung pada token yang dikirimkan server web ke browser klien setelah otentikasi klien yang berhasil. Token sesi biasanya terdiri dari string lebar variabel dan dapat digunakan dalam berbagai cara, seperti di URL, di header permintaan HTTP sebagai cookie, di bagian lain dari header permintaan HTTP, atau bahkan di badan permintaan HTTP.</p><p>Serangan pembajakan sesi membahayakan token sesi dengan mencuri atau memprediksi token sesi yang valid untuk mendapatkan akses yang tidak sah ke server web.</p><p>Token sesi dapat dikompromikan dengan cara yang berbeda; Yang paling umum adalah:-Prediksi token sesi.- Sesi Pemindaian.- Serangan sisi klien (XSS, kode javascript berbahaya, Trojan, dll) .- Serangan man-in-the-middle.- Serangan Browser.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Bypass Protection Mechanism: Seorang penyerang dapat tetap dicatat lama, yang dapat menggunakan kembali ID lama atau dihapus dan referensi langsung.</p></li></ul>",
        "remediation": "<p>Gunakan proses pembuatan kunci sesi standar industri yang menghasilkan kunci sesi menggunakan banyak entropi, dan enkripsi dan menandatangani token identitas dengan benar dalam perjalanan. Anda dapat mengandalkan banyak server web dan aplikasi umum untuk menangani tugas ini. Untuk setiap sesi, gunakan batas waktu sesi. Setelah periode batas waktu ini, akhiri sesi pengguna jika mereka tidak secara eksplisit keluar. Kunci sesi baru harus dihasilkan jika pengguna masuk lagi.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Session Management",
    "details": [
      {
        "references": [
          "https://owasp.org/www-community/attacks/Session_hijacking_attack"
        ],
        "locale": "en",
        "title": "Concurrent logins not properly controlled.",
        "vulnType": "OWASP WSTG",
        "description": "<p>Aplikasi yang membutuhkan otentikasi hanya harus mengizinkan satu sesi aktif per pengguna dan tidak boleh mengizinkan beberapa sesi pengguna yang diautentikasi di berbagai browser atau komputer.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Bypass Protection Mechanism: Seorang penyerang dapat tetap dicatat lama, yang dapat menggunakan kembali ID lama atau dihapus dan referensi langsung.</p></li></ul>",
        "remediation": "<p>Disarankan bahwa sesi pengguna yang sama tidak berjalan secara bersamaan dan bahwa mereka selalu menerima pemberitahuan ketika sesi lama masih aktif.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/159.html"
        ],
        "locale": "en",
        "title": "(generic) Failure to Sanitize input",
        "vulnType": "OWASP WSTG",
        "description": "<p>Penggunaan elemen khusus yang salah dalam input yang dikendalikan pengguna tidak disaring dengan baik, dihapus, dikutip, atau dikelola oleh produk, yang dapat memiliki dampak negatif pada perilaku dan integritasnya.</p>",
        "observation": "<ul><li><p>Ketersediaan: DOS: Kecelakaan, keluar, atau restart: Pemeriksaan validasi sisi klien dapat dengan mudah dilewati, memungkinkan input yang tidak terduga atau tidak terduga masuk ke dalam aplikasi, berpotensi sebagai data tepercaya. Hal ini dapat menyebabkan keadaan yang tidak terduga, perilaku dan mungkin kecelakaan yang dihasilkan.</p></li><li><p>Ketersediaan: Jalankan kode atau perintah yang tidak sah: Penyerang dapat menggunakan input berbahaya untuk memodifikasi data atau mungkin mengubah aliran kontrol dengan cara yang tidak terduga, termasuk eksekusi perintah sewenang -wenang.</p></li></ul>",
        "remediation": "<p>Pengembang harus mengantisipasi bahwa elemen khusus akan disuntikkan/dihapus/dimanipulasi dalam vektor input sistem perangkat lunak mereka. Gunakan kombinasi daftar hitam dan whitelist yang tepat untuk memastikan hanya input yang valid, diharapkan dan tepat yang diproses oleh sistem</p><ul><li><p>Asumsikan semua input berbahaya. Gunakan strategi validasi input \"\" terima \"yang diketahui\", yaitu, gunakan daftar input yang dapat diterima yang secara ketat sesuai dengan spesifikasi. Tolak input apa pun yang tidak sepenuhnya sesuai dengan spesifikasi, atau mengubahnya menjadi sesuatu yang berhasil. Saat melakukan validasi input, pertimbangkan semua properti yang berpotensi relevan, termasuk panjang, jenis input, rentang penuh nilai yang dapat diterima, input yang hilang atau ekstra, sintaks, konsistensi di seluruh bidang terkait, dan kesesuaian dengan aturan bisnis. Sebagai contoh logika aturan bisnis, \"\" kapal \"\" mungkin secara sintaksis valid karena hanya berisi karakter alfanumerik, tetapi tidak valid jika input hanya diharapkan berisi warna seperti \"merah\" atau \"biru.\" Jangan mengandalkan secara eksklusif mencari input berbahaya atau cacat. Ini cenderung kehilangan setidaknya satu input yang tidak diinginkan, terutama jika lingkungan kode berubah. Ini dapat memberi penyerang cukup ruang untuk memotong validasi yang dimaksud. Namun, daftar hitam dapat berguna untuk mendeteksi serangan potensial atau menentukan input mana yang sangat cacat sehingga harus ditolak secara langsung.</p></li><li><p>Meskipun berisiko untuk menggunakan string kueri yang dihasilkan secara dinamis, kode, atau perintah yang mencampur kontrol dan data bersama-sama, kadang-kadang mungkin tidak dapat dihindari. Mengutip argumen dengan benar dan lepas dari karakter khusus dalam argumen tersebut. Pendekatan yang paling konservatif adalah melarikan diri atau menyaring semua karakter yang tidak melewati daftar putih yang sangat ketat (seperti semua yang bukan ruang alfanumerik atau putih). Jika beberapa karakter khusus masih diperlukan, seperti ruang putih, bungkus setiap argumen dalam kutipan setelah langkah melarikan diri/penyaringan. Hati -hati dengan injeksi argumen (88).</p></li><li><p>Input harus diterjemahkan dan dikanonisasi ke representasi internal aplikasi saat ini sebelum divalidasi (180). Pastikan aplikasi tidak mendekode input yang sama dua kali (174). Kesalahan seperti itu dapat digunakan untuk memotong skema validasi daftar putih dengan memperkenalkan input berbahaya setelah diperiksa.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting",
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "locale": "en",
        "title": "(generic) Cross-Site Scripting (XSS)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Kerentanan \"scripting lintas situs (XSS)\" memungkinkan pihak luar untuk menyuntikkan skrip Java atau kode HTML ke halaman web aplikasi tertentu. Dengan melakukan ini, dimungkinkan untuk mencuri sesi pengguna, mengkompromikan keamanan sistem, dan mendapatkan informasi yang sensitif atau berpemilik dari aplikasi.</p><p>Kerentanan ini biasanya disebabkan oleh kegagalan aplikasi untuk memvalidasi parameter input dan output, yang sering terjadi dengan formulir.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Serangan paling umum dilakukan dengan skrip lintas situs melibatkan pengungkapan informasi yang disimpan dalam cookie pengguna. Biasanya, pengguna jahat akan membuat skrip sisi klien, yang-ketika diuraikan oleh browser web-melakukan beberapa aktivitas (seperti mengirim semua cookie situs ke alamat email yang diberikan). Skrip ini akan dimuat dan dijalankan oleh setiap pengguna yang mengunjungi situs web. Karena situs yang meminta untuk menjalankan skrip memiliki akses ke cookie yang dimaksud, skrip jahat juga.</p></li><li><p>Ketersediaan: Jalankan kode atau perintah yang tidak sah: Dalam beberapa keadaan, dimungkinkan untuk menjalankan kode sewenang-wenang pada komputer korban ketika skrip lintas situs dikombinasikan dengan kekurangan lainnya.</p></li><li><p>Kontrol Akses: Baca Data Aplikasi: Konsekuensi dari serangan XSS adalah sama terlepas dari apakah itu disimpan atau tercermin. Perbedaannya adalah bagaimana muatan tiba di server. XSS dapat menyebabkan berbagai masalah bagi pengguna akhir yang berkisar tingkat keparahan dari gangguan untuk menyelesaikan kompromi akun. Beberapa kerentanan skrip lintas situs dapat dieksploitasi untuk memanipulasi atau mencuri cookie, membuat permintaan yang dapat disalahartikan bagi orang-orang dari pengguna yang valid, kompromi informasi rahasia, atau menjalankan kode berbahaya pada sistem pengguna akhir untuk berbagai keperluan jahat. Serangan kerusakan lainnya termasuk pengungkapan file pengguna akhir, instalasi program kuda Trojan, mengarahkan kembali pengguna ke beberapa halaman atau situs lain, menjalankan kontrol \"aktif X\" (di bawah Microsoft Internet Explorer) dari situs yang menurut pengguna dapat dipercaya, dan memodifikasi presentasi konten.</p></li></ul>",
        "remediation": "<p>Setiap parameter yang dikelola aplikasi perlu divalidasi, terutama ketika menyangkut data input yang disediakan oleh pengguna. Validasi ini selalu dilakukan di sisi server dan tidak pernah bergantung pada validasi yang dilakukan di sisi klien.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting",
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "locale": "en",
        "title": "Reflected Cross-Site Scripting (Reflected XSS)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Melalui serangan scripting cross-site (XSS), penyerang dapat memasukkan kode berbahaya yang berjalan di browser korban, mengendalikan browser, dan menggunakannya untuk mengakses kredensial, data sensitif, atau data sesi dari aplikasi yang terkena dampak.</p><p>Untuk scripting lintas situs yang dipantulkan ke tempat kerja, penyerang harus berhubungan langsung dengan korban untuk mengirim kode jahat yang akan dijalankan di browser korban sebagai bagian dari aplikasi.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Serangan paling umum dilakukan dengan skrip lintas situs melibatkan pengungkapan informasi yang disimpan dalam cookie pengguna. Biasanya, pengguna jahat akan membuat skrip sisi klien, yang-ketika diuraikan oleh browser web-melakukan beberapa aktivitas (seperti mengirim semua cookie situs ke alamat email yang diberikan). Skrip ini akan dimuat dan dijalankan oleh setiap pengguna yang mengunjungi situs web. Karena situs yang meminta untuk menjalankan skrip memiliki akses ke cookie yang dimaksud, skrip jahat juga.</p></li><li><p>Ketersediaan: Jalankan kode atau perintah yang tidak sah: Dalam beberapa keadaan, dimungkinkan untuk menjalankan kode sewenang-wenang pada komputer korban ketika skrip lintas situs dikombinasikan dengan kekurangan lainnya.</p></li><li><p>Kontrol Akses: Baca Data Aplikasi: Konsekuensi dari serangan XSS adalah sama terlepas dari apakah itu disimpan atau tercermin. Perbedaannya adalah bagaimana muatan tiba di server. XSS dapat menyebabkan berbagai masalah bagi pengguna akhir yang berkisar tingkat keparahan dari gangguan untuk menyelesaikan kompromi akun. Beberapa kerentanan skrip lintas situs dapat dieksploitasi untuk memanipulasi atau mencuri cookie, membuat permintaan yang dapat disalahartikan bagi orang-orang dari pengguna yang valid, kompromi informasi rahasia, atau menjalankan kode berbahaya pada sistem pengguna akhir untuk berbagai keperluan jahat. Serangan kerusakan lainnya termasuk pengungkapan file pengguna akhir, instalasi program kuda Trojan, mengarahkan kembali pengguna ke beberapa halaman atau situs lain, menjalankan kontrol \"aktif X\" (di bawah Microsoft Internet Explorer) dari situs yang menurut pengguna dapat dipercaya, dan memodifikasi presentasi konten.</p></li></ul>",
        "remediation": "<p>Mencegah serangan scripting cross-site (XSS) tidak sepele tergantung pada kompleksitas aplikasi dan bagaimana menangani data yang dikendalikan pengguna dan jenis kerentanan scripting cross-site (XSS).</p><p>Namun, ada prinsip -prinsip umum tertentu yang harus diterapkan oleh langkah -langkah berikut:</p><ul><li><p>Input Data Filter: Perlakukan semua input pengguna sebagai tidak dipercaya, filter sesulit mungkin berdasarkan apa yang diharapkan atau input yang valid.</p></li><li><p>Gunakan enkripsi: Dengan penggunaan teknik enkripsi yang tepat mencegahnya ditafsirkan sebagai konten yang sah.</p></li><li><p>Gunakan header respons yang aman: Browser menerima berbagai jenis header untuk mencegah serangan scripting lintas-situs (XSS), seperti Kebijakan Keamanan Konten (CSP) dan 'perlindungan X-XSS'.</p></li><li><p>Lindungi Cookie: perlu mengurangi kemungkinan akses ke cookie sesi dengan bendera 'httponly'. Bendera ini menonaktifkan akses ke cookie melalui javascript sisi klien.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-community/attacks/Server_Side_Request_Forgery https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_SS heet.html"
        ],
        "locale": "en",
        "title": "Stored Cross-Site Scripting (Stored XSS)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Serangan scripting cross-site (XSS) adalah jenis injeksi, di mana skrip jahat disuntikkan ke situs web yang jinak dan tepercaya. Serangan XSS terjadi ketika penyerang menggunakan aplikasi web untuk mengirim kode berbahaya, umumnya dalam bentuk skrip sisi browser, kepada pengguna akhir yang berbeda. Kelemahan yang memungkinkan serangan ini berhasil cukup luas dan terjadi di mana saja aplikasi web menggunakan input dari pengguna dalam output yang dihasilkannya tanpa memvalidasi atau mengkodenya. Serangan yang disimpan adalah yang di mana skrip yang disuntikkan disimpan secara permanen pada server target, seperti dalam database, di forum pesan, log pengunjung, bidang komentar, dll. Korban kemudian mengambil skrip berbahaya dari server ketika meminta informasi yang tersimpan. XSS yang disimpan juga kadang-kadang disebut sebagai gigih atau tipe-I XSS.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Serangan paling umum dilakukan dengan skrip lintas situs melibatkan pengungkapan informasi yang disimpan dalam cookie pengguna. Biasanya, pengguna jahat akan membuat skrip sisi klien, yang-ketika diuraikan oleh browser web-melakukan beberapa aktivitas (seperti mengirim semua cookie situs ke alamat email yang diberikan). Skrip ini akan dimuat dan dijalankan oleh setiap pengguna yang mengunjungi situs web. Karena situs yang meminta untuk menjalankan skrip memiliki akses ke cookie yang dimaksud, skrip jahat juga.</p></li><li><p>Ketersediaan: Jalankan kode atau perintah yang tidak sah: Dalam beberapa keadaan, dimungkinkan untuk menjalankan kode sewenang-wenang pada komputer korban ketika skrip lintas situs dikombinasikan dengan kekurangan lainnya.</p></li><li><p>Kontrol Akses: Baca Data Aplikasi: Konsekuensi dari serangan XSS adalah sama terlepas dari apakah itu disimpan atau tercermin. Perbedaannya adalah bagaimana muatan tiba di server. XSS dapat menyebabkan berbagai masalah bagi pengguna akhir yang berkisar tingkat keparahan dari gangguan untuk menyelesaikan kompromi akun. Beberapa kerentanan skrip lintas situs dapat dieksploitasi untuk memanipulasi atau mencuri cookie, membuat permintaan yang dapat disalahartikan bagi orang-orang dari pengguna yang valid, kompromi informasi rahasia, atau menjalankan kode berbahaya pada sistem pengguna akhir untuk berbagai keperluan jahat. Serangan kerusakan lainnya termasuk pengungkapan file pengguna akhir, instalasi program kuda Trojan, mengarahkan kembali pengguna ke beberapa halaman atau situs lain, menjalankan kontrol \"aktif X\" (di bawah Microsoft Internet Explorer) dari situs yang menurut pengguna dapat dipercaya, dan memodifikasi presentasi konten.</p></li></ul>",
        "remediation": "<p>Sanitasi semua input sisi server diperlukan untuk mengurangi risiko XSS yang disimpan. Untuk melayani semua data ke sisi klien, buat filter kotak putih dengan karakter yang diizinkan dan gunakan pengkodean HTML.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution",
          "https://cwe.mitre.org/data/definitions/235.html",
          "https://capec.mitre.org/data/definitions/460.html"
        ],
        "locale": "en",
        "title": "HTTP Parameter Pollution (HPP)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Polusi parameter HTTP memanfaatkan perilaku aplikasi yang salah ketika menanggapi permintaan HTTP yang memiliki parameter yang sama didefinisikan pada server tetapi dikirim dengan nilai yang berbeda. Polusi parameter HTTP memanfaatkan perilaku aplikasi yang salah ketika menanggapi permintaan HTTP yang memiliki parameter yang sama didefinisikan pada server tetapi dikirim dengan nilai yang berbeda.</p>",
        "observation": "<ul><li><p>Integritas: Keadaan Tak Terduga: Penyerang dapat memanipulasi parameter dalam aplikasi</p></li></ul>",
        "remediation": "<p>Serangan semacam ini akan dihindari dengan membersihkan data input dengan benar, memverifikasi jumlah instance parameter individu dalam permintaan, dan mencari permintaan dengan penugasan duplikat.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://www.owasp.org/index.php/SQL_Injection"
        ],
        "locale": "en",
        "title": "(generic) SQL Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Melalui penggunaan injeksi kode SQL (SQLI), dimungkinkan untuk mengubah logika pernyataan SQL dan memungkinkan pelaksanaan berbagai jenis kueri basis data. Selain menambahkan catatan baru atau menghapus/memodifikasi yang sudah ada, dimungkinkan untuk mendapatkan data dari database yang seharusnya, secara teori, tidak dapat diakses, seperti pengguna, kata sandi, detail tentang aplikasi itu sendiri, dll. Jika pengguna database memiliki lebih banyak hak daripada yang diperlukan, dimungkinkan bagi mereka untuk mengakses database lain atau bahkan menjalankan perintah sistem. Akar utama penyebab injeksi kode SQL (SQLI) adalah validasi parameter input aplikasi yang tidak tepat.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Karena database SQL umumnya menyimpan data sensitif, kehilangan kerahasiaan adalah masalah yang sering terjadi dengan kerentanan injeksi SQL.</p></li><li><p>Kontrol Akses: Bypass Perlindungan Mekanisme: Jika perintah SQL yang buruk digunakan untuk memeriksa nama pengguna dan kata sandi, dimungkinkan untuk terhubung ke sistem sebagai pengguna lain tanpa pengetahuan kata sandi sebelumnya.</p></li><li><p>Kontrol Akses: Bypass Perlindungan Mekanisme: Jika informasi otorisasi diadakan dalam database SQL, dimungkinkan untuk mengubah informasi ini melalui eksploitasi keberhasilan kerentanan injeksi SQL.</p></li><li><p>Integritas: Modifikasi Data Aplikasi: Sama seperti dimungkinkan untuk membaca informasi sensitif, juga dimungkinkan untuk membuat perubahan atau bahkan menghapus informasi ini dengan serangan injeksi SQL.</p></li></ul>",
        "remediation": "<p>Validasi parameter yang dikelola aplikasi, terutama ketika pengguna mengirimkannya sebagai data input. Validasi ini selalu dilakukan di sisi server dan tidak pernah tergantung pada validasi sisi klien.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
          "https://owasp.org/www-community/attacks/Blind_SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "locale": "en",
        "title": "In band Union-based SQL Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Serangan SQL Injection (SQLI) berupaya mendapatkan informasi atau bahkan menjalankan perintah melalui kerentanan ini dengan berinteraksi secara tak terduga dengan database. Karena ini adalah injeksi SQL buta dalam hal ini, responsnya tidak secara langsung memberikan informasi tentangnya; Sebaliknya, penyerang harus menguraikan pesan respons server untuk mendapatkan informasi.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Karena database SQL umumnya menyimpan data sensitif, kehilangan kerahasiaan adalah masalah yang sering terjadi dengan kerentanan injeksi SQL.</p></li><li><p>Kontrol Akses: Bypass Perlindungan Mekanisme: Jika perintah SQL yang buruk digunakan untuk memeriksa nama pengguna dan kata sandi, dimungkinkan untuk terhubung ke sistem sebagai pengguna lain tanpa pengetahuan kata sandi sebelumnya.</p></li><li><p>Kontrol Akses: Bypass Perlindungan Mekanisme: Jika informasi otorisasi diadakan dalam database SQL, dimungkinkan untuk mengubah informasi ini melalui eksploitasi keberhasilan kerentanan injeksi SQL.</p></li><li><p>Integritas: Modifikasi Data Aplikasi: Sama seperti dimungkinkan untuk membaca informasi sensitif, juga dimungkinkan untuk membuat perubahan atau bahkan menghapus informasi ini dengan serangan injeksi SQL.</p></li></ul>",
        "remediation": "<p>Sanitasi parameter input aplikasi disarankan untuk mengatasi masalah ini karena melakukan hal itu mencegah penyerang memperkenalkan karakter yang dapat mengubah kueri SQL dan mengaktifkan pengambilan informasi.</p><p>Saran utama adalah untuk menerapkan sistem \"daftar putih\" di mana hanya kata -kata dan karakter yang ditentukan dalam daftar yang diterima dan nilai lain diabaikan sebelum digunakan dalam database. Jika opsi ini tidak layak, \"\" Daftar Hitam \"\" yang menghindari karakter yang ditentukan dapat dibuat menggunakan karakter yang rentan terhadap serangan semacam ini, seperti % #'\"\" \"\" \"\" \"\" () + +, ;, dan kata kunci kueri SQL seperti \"SELECT,\" \"Di mana,\" \"Union,\" \"gabungan,\" dan \"pembaruan.\" Selain itu, Anda harus mencari variasi pengkodean apa pun untuk karakter-karakter ini, seperti pengkodean URL, Unicode/UTF-8, dan Hex.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "locale": "en",
        "title": "In band Error-Based SQL Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Interaksi database yang tidak terduga yang dikenal sebagai serangan SQL Injection (SQLI) mencoba untuk mendapatkan informasi atau bahkan menjalankan perintah menggunakan cacat ini. Karena ini adalah injeksi SQL berbasis kesalahan dalam hal ini, respons tidak secara langsung memberikan informasi tentangnya; Sebaliknya, penyerang harus menafsirkan pesan kesalahan yang disediakan server untuk mendapatkan informasi.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Karena database SQL umumnya menyimpan data sensitif, kehilangan kerahasiaan adalah masalah yang sering terjadi dengan kerentanan injeksi SQL.</p></li><li><p>Kontrol Akses: Bypass Perlindungan Mekanisme: Jika perintah SQL yang buruk digunakan untuk memeriksa nama pengguna dan kata sandi, dimungkinkan untuk terhubung ke sistem sebagai pengguna lain tanpa pengetahuan kata sandi sebelumnya.</p></li><li><p>Kontrol Akses: Bypass Perlindungan Mekanisme: Jika informasi otorisasi diadakan dalam database SQL, dimungkinkan untuk mengubah informasi ini melalui eksploitasi keberhasilan kerentanan injeksi SQL.</p></li><li><p>Integritas: Modifikasi Data Aplikasi: Sama seperti dimungkinkan untuk membaca informasi sensitif, juga dimungkinkan untuk membuat perubahan atau bahkan menghapus informasi ini dengan serangan injeksi SQL.</p></li></ul>",
        "remediation": "<p>Sanitasi parameter input aplikasi disarankan untuk mengatasi masalah ini karena melakukan hal itu mencegah penyerang memperkenalkan karakter yang dapat mengubah kueri SQL dan mengaktifkan pengambilan informasi.</p><p>Saran utama adalah untuk menerapkan sistem \"daftar putih\" di mana hanya kata -kata dan karakter yang ditentukan dalam daftar yang diterima dan nilai lain diabaikan sebelum digunakan dalam database. Jika opsi ini tidak layak, \"\" Daftar Hitam \"\" yang menghindari karakter yang ditentukan dapat dibuat menggunakan karakter yang rentan terhadap serangan semacam ini, seperti % #'\"\" \"\" \"\" \"\" () + +, ;, dan kata kunci kueri SQL seperti \"SELECT,\" \"Di mana,\" \"Union,\" \"gabungan,\" dan \"pembaruan.\" Selain itu, Anda harus mencari variasi pengkodean apa pun untuk karakter-karakter ini, seperti pengkodean URL, Unicode/UTF-8, dan Hex.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "locale": "en",
        "title": "Blind Time-Based SQL Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Serangan SQL Injection (SQLI) berupaya mendapatkan informasi atau bahkan menjalankan perintah melalui kerentanan ini dengan berinteraksi secara tak terduga dengan database. Karena ini adalah injeksi SQL berbasis waktu dalam hal ini, respons tidak secara langsung memberikan informasi tentangnya; Sebaliknya, penyerang harus menafsirkan waktu respons server untuk mendapatkan informasi yang diperlukan.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Karena database SQL umumnya menyimpan data sensitif, kehilangan kerahasiaan adalah masalah yang sering terjadi dengan kerentanan injeksi SQL.</p></li><li><p>Kontrol Akses: Bypass Perlindungan Mekanisme: Jika perintah SQL yang buruk digunakan untuk memeriksa nama pengguna dan kata sandi, dimungkinkan untuk terhubung ke sistem sebagai pengguna lain tanpa pengetahuan kata sandi sebelumnya.</p></li><li><p>Kontrol Akses: Bypass Perlindungan Mekanisme: Jika informasi otorisasi diadakan dalam database SQL, dimungkinkan untuk mengubah informasi ini melalui eksploitasi keberhasilan kerentanan injeksi SQL.</p></li><li><p>Integritas: Modifikasi Data Aplikasi: Sama seperti dimungkinkan untuk membaca informasi sensitif, juga dimungkinkan untuk membuat perubahan atau bahkan menghapus informasi ini dengan serangan injeksi SQL.</p></li></ul>",
        "remediation": "<p>Sanitasi parameter input aplikasi disarankan untuk mengatasi masalah ini karena melakukan hal itu mencegah penyerang memperkenalkan karakter yang dapat mengubah kueri SQL dan mengaktifkan pengambilan informasi.</p><p>Saran utama adalah untuk menerapkan sistem \"daftar putih\" di mana hanya kata -kata dan karakter yang ditentukan dalam daftar yang diterima dan nilai lain diabaikan sebelum digunakan dalam database. Jika opsi ini tidak layak, \"\" Daftar Hitam \"\" yang menghindari karakter yang ditentukan dapat dibuat menggunakan karakter yang rentan terhadap serangan semacam ini, seperti % #'\"\" \"\" \"\" \"\" () + +, ;, dan kata kunci kueri SQL seperti \"SELECT,\" \"Di mana,\" \"Union,\" \"gabungan,\" dan \"pembaruan.\" Selain itu, Anda harus mencari variasi pengkodean apa pun untuk karakter-karakter ini, seperti pengkodean URL, Unicode/UTF-8, dan Hex.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "locale": "en",
        "title": "Blind Boolean-Based SQL Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Penyerang menggunakan injeksi SQL berbasis Boolean untuk mengirim kueri SQL ke database, memaksa aplikasi untuk mengembalikan hasil yang berbeda tergantung pada apakah kueri mengembalikan benar atau salah. Konten respons HTTP dapat berubah atau tetap sama tergantung pada hasilnya. Bahkan jika tidak ada data yang dikembalikan dari database, ini memungkinkan penyerang untuk menentukan apakah hasilnya benar atau salah.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Karena database SQL umumnya menyimpan data sensitif, kehilangan kerahasiaan adalah masalah yang sering terjadi dengan kerentanan injeksi SQL.</p></li><li><p>Kontrol Akses: Bypass Perlindungan Mekanisme: Jika perintah SQL yang buruk digunakan untuk memeriksa nama pengguna dan kata sandi, dimungkinkan untuk terhubung ke sistem sebagai pengguna lain tanpa pengetahuan kata sandi sebelumnya.</p></li><li><p>Kontrol Akses: Bypass Perlindungan Mekanisme: Jika informasi otorisasi diadakan dalam database SQL, dimungkinkan untuk mengubah informasi ini melalui eksploitasi keberhasilan kerentanan injeksi SQL.</p></li><li><p>Integritas: Modifikasi Data Aplikasi: Sama seperti dimungkinkan untuk membaca informasi sensitif, juga dimungkinkan untuk membuat perubahan atau bahkan menghapus informasi ini dengan serangan injeksi SQL.</p></li></ul>",
        "remediation": "<p>Sanitasi parameter input aplikasi disarankan untuk mengatasi masalah ini karena melakukan hal itu mencegah penyerang memperkenalkan karakter yang dapat mengubah kueri SQL dan mengaktifkan pengambilan informasi.</p><p>Saran utama adalah untuk menerapkan sistem \"daftar putih\" di mana hanya kata -kata dan karakter yang ditentukan dalam daftar yang diterima dan nilai lain diabaikan sebelum digunakan dalam database. Jika opsi ini tidak layak, \"\" Daftar Hitam \"\" yang menghindari karakter yang ditentukan dapat dibuat menggunakan karakter yang rentan terhadap serangan semacam ini, seperti % #'\"\" \"\" \"\" \"\" () + +, ;, dan kata kunci kueri SQL seperti \"SELECT,\" \"Di mana,\" \"Union,\" \"gabungan,\" dan \"pembaruan.\" Selain itu, Anda harus mencari variasi pengkodean apa pun untuk karakter-karakter ini, seperti pengkodean URL, Unicode/UTF-8, dan Hex.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "locale": "en",
        "title": "Out of Band SQL Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Injeksi SQL out-of-band mengeluarkan data melalui saluran output, yang dapat berupa protokol DNS atau HTTP, yang bertentangan dengan injeksi SQL in-band dan buta. Bergantung pada fungsi yang tersedia, sistem database mungkin atau mungkin tidak dapat memulai permintaan HTTP atau DNS yang keluar. Fungsi dapat mengatur koneksi (misalnya, dbms ldap.init, utl http.request) atau beroperasi pada file (misalnya, muat file (), master..xp dirtree). Server web dan basis data yang ditargetkan harus memenuhi persyaratan berikut untuk mengeksploitasi injeksi SQL OOB:</p><ul><li><p>Kurangnya validasi input aplikasi web</p></li><li><p>Lingkungan Jaringan yang Berbeda dengan Perimeter Keamanan dan Mengizinkan Server Database Target Untuk Memulai Permintaan Keluar (melalui DNS atau HTTP) kepada Masyarakat Umum</p></li><li><p>Hak yang cukup untuk menjalankan fungsi yang diperlukan untuk mengirim permintaan keluar</p></li></ul>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Karena database SQL umumnya menyimpan data sensitif, kehilangan kerahasiaan adalah masalah yang sering terjadi dengan kerentanan injeksi SQL.</p></li><li><p>Kontrol Akses: Bypass Perlindungan Mekanisme: Jika perintah SQL yang buruk digunakan untuk memeriksa nama pengguna dan kata sandi, dimungkinkan untuk terhubung ke sistem sebagai pengguna lain tanpa pengetahuan kata sandi sebelumnya.</p></li><li><p>Kontrol Akses: Bypass Perlindungan Mekanisme: Jika informasi otorisasi diadakan dalam database SQL, dimungkinkan untuk mengubah informasi ini melalui eksploitasi keberhasilan kerentanan injeksi SQL.</p></li><li><p>Integritas: Modifikasi Data Aplikasi: Sama seperti dimungkinkan untuk membaca informasi sensitif, juga dimungkinkan untuk membuat perubahan atau bahkan menghapus informasi ini dengan serangan injeksi SQL.</p></li></ul>",
        "remediation": "<ul><li><p>Baik di sisi klien dan server, validasi input.</p></li><li><p>Penanganan kesalahan yang benar untuk mencegah informasi terperinci tentang mereka ditampilkan.</p></li><li><p>Periksa arsitektur untuk jaringan dan keamanan.</p></li><li><p>Gunakan hak istimewa sesedikit mungkin saat mengalokasikan akun database ke aplikasi.</p></li><li><p>Penggunaan langkah -langkah keamanan tambahan seperti sistem pencegahan intrusi (IPS) dan firewall aplikasi web (WAF).</p></li><li><p>Terus mengawasi anomali dan memiliki prosedur respons insiden yang efektif sebagai jaringan kontrol keamanan.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection",
          "https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html",
          "https://cwe.mitre.org/data/definitions/90.html"
        ],
        "locale": "en",
        "title": "LDAP Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Informasi tentang pengguna, host, dan banyak objek lain disimpan menggunakan Protokol Akses Direktori Ringan (LDAP). Injeksi LDAP adalah serangan sisi server yang dapat mengungkapkan, memodifikasi, atau memasukkan data sensitif tentang pengguna dan host yang diwakili dalam struktur LDAP. Parameter input yang kemudian diteruskan ke internal Find, Tambah, dan memodifikasi fungsi diubah untuk mencapai ini.</p><p>Untuk memungkinkan pengguna mengotentikasi atau mencari informasi pengguna lain dalam struktur perusahaan, aplikasi web mungkin menggunakan LDAP. Serangan injeksi LDAP bertujuan untuk memasukkan MetaCharacters filter pencarian LDAP ke dalam kueri aplikasi yang akan dieksekusi.</p>",
        "observation": "<ul><li><p>Integritas: Modifikasi Data Aplikasi: Penyerang dapat memasukkan input yang mengubah kueri LDAP yang memungkinkan perintah atau kode yang tidak diinginkan untuk dieksekusi, memungkinkan data sensitif dibaca atau dimodifikasi atau menyebabkan perilaku tidak diinginkan lainnya.</p></li></ul>",
        "remediation": "<p>Asumsikan bahwa semua input berbahaya. Gunakan strategi validasi input \"terima yang baik\", yaitu, gunakan daftar input yang dapat diterima yang sangat sesuai dengan spesifikasi. Tolak input apa pun yang tidak sepenuhnya sesuai dengan spesifikasi, atau mengubahnya menjadi sesuatu yang berhasil.</p><p>Saat melakukan validasi input, pertimbangkan semua properti yang berpotensi relevan, seperti panjang, jenis input, rentang penuh nilai yang dapat diterima, input yang hilang atau ekstra, sintaks, konsistensi antara bidang terkait dan kepatuhan terhadap aturan bisnis. Sebagai contoh logika aturan bisnis, \"kapal\" mungkin valid secara sintaksis karena hanya berisi karakter alfanumerik, tetapi tidak valid jika input diharapkan hanya berisi warna seperti \"merah\" atau \"biru\".</p><p>Jangan hanya mengandalkan pencarian entri berbahaya atau cacat. Setidaknya satu input yang tidak diinginkan kemungkinan akan terlewatkan, terutama jika lingkungan kode berubah. Ini dapat memberi penyerang cukup ruang untuk memotong validasi yang dimaksud. Namun, daftar penolakan dapat berguna untuk mendeteksi potensi serangan atau menentukan entri mana yang sangat cacat sehingga harus ditolak secara langsung.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/611.html",
          "https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing https://capec.mitre.org/data/definitions/201.html"
        ],
        "locale": "en",
        "title": "XML External Entity Processing (XXE)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Beberapa aplikasi mengirimkan data antara browser dan server menggunakan format XML. Aplikasi yang melakukan ini hampir selalu memproses data XML di server menggunakan pustaka standar atau API platform. Contoh entitas XML khusus adalah yang nilainya dimuat dari sumber selain DTD di mana mereka dinyatakan. Dari sudut pandang keamanan, entitas eksternal sangat menarik karena memungkinkan definisi entitas berdasarkan konten jalur file atau URL.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca file atau direktori: Jika penyerang dapat menyertakan DTD yang dibuat dan resolver entitas default diaktifkan, penyerang mungkin dapat mengakses file sewenang -wenang pada sistem.</p></li><li><p>Integritas: Bypass Perlindungan Mekanisme: DTD dapat mencakup permintaan HTTP yang sewenang -wenang agar server dapat dijalankan. Ini dapat menyebabkan serangan lain memanfaatkan hubungan kepercayaan server dengan entitas lain.</p></li><li><p>Ketersediaan: DOS: Konsumsi Sumber Daya (Memori): Perangkat lunak dapat mengkonsumsi siklus CPU yang berlebihan atau memori menggunakan URI yang menunjuk ke file besar, atau perangkat yang selalu mengembalikan data seperti /dev /acak. Bergantian, URI dapat merujuk file yang berisi banyak referensi entitas bersarang atau rekursif untuk memperlambat penguraian lebih lanjut.</p></li></ul>",
        "remediation": "<p>Menurut lembar cheat OWASP \"Pencegahan XXE,\" mematikan pemrosesan entitas eksternal XML dan DTD di semua parser XML di aplikasi. Mendaftar, menggunakan validasi input sisi server, penyaringan, atau sanitasi yang positif (\"daftar putih\") untuk menangkal data yang bermusuhan dalam dokumen XML, atau node, atau node.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/08-Testing_for_SSI_Injection",
          "https://owasp.org/www-community/attacks/Server-Side_Includes_(SSI)_Injection#:~:text=The%20Server%2DSide%20Includes%20attack,use%20through%20user%20input%20fields.",
          "- http://httpd.apache.org/docs/current/howto/ssi.html",
          "https://cwe.mitre.org/data/definitions/96.html",
          "https://cwe.mitre.org/data/definitions/116.html",
          "https://cwe.mitre.org/data/definitions/159.html"
        ],
        "locale": "en",
        "title": "Server Side Injection (SSI)",
        "vulnType": "OWASP WSTG",
        "description": "<p>SSI (server-side termasuk) adalah arahan yang ada dalam aplikasi web yang digunakan untuk memberi makan halaman HTML dengan konten dinamis. Mereka mirip dengan CGI, kecuali bahwa SSI digunakan untuk melakukan beberapa tindakan sebelum halaman saat ini dimuat atau saat sedang ditampilkan. Untuk melakukan ini, server web mem -parsing SSIS sebelum melayani halaman kepada pengguna.</p><p>Serangan injeksi SSI memungkinkan Anda untuk menyerang aplikasi web dengan menyuntikkan skrip ke halaman HTML atau dengan menjalankan kode sewenang -wenang dari jarak jauh. Ini dapat dieksploitasi melalui manipulasi arahan SSI yang digunakan dalam aplikasi atau memaksa penggunaannya dengan menyuntikkan arahan baru melalui bidang input pengguna.</p><p>Dimungkinkan untuk memeriksa apakah aplikasi dengan benar memvalidasi data di bidang input dengan memasukkan karakter yang digunakan dalam arahan SSI, seperti:</p><p>&lt;! # = /. \"-&gt; dan [a-za-z0-9]</p><p>Cara lain untuk mengetahui apakah aplikasi ini berpotensi rentan adalah dengan memeriksa keberadaan halaman dengan ekstensi .stm, .shtm dan .shtml. Namun, tidak adanya halaman tersebut tidak berarti bahwa aplikasi dilindungi terhadap serangan SSI.</p><p>Dalam kedua kasus tersebut, serangan hanya akan berhasil jika server web memungkinkan SSI untuk berjalan tanpa melakukan validasi yang tepat terlebih dahulu. Jika ini terjadi, dimungkinkan untuk mengakses dan memanipulasi file dan proses sistem berdasarkan izin pemilik proses server web.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Kode yang disuntikkan dapat mengakses data / file terbatas.</p></li><li><p>Kontrol Akses: Bypass Mekanisme Perlindungan: Dalam beberapa kasus, Kode Suntik Kontrol Otentikasi; Ini dapat menyebabkan kerentanan jarak jauh.</p></li><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Kode yang disuntikkan dapat mengakses sumber daya yang dicegah oleh penyerang secara langsung untuk mengakses.</p></li><li><p>Lainnya: Jalankan kode atau perintah yang tidak sah: Serangan injeksi kode dapat menyebabkan hilangnya integritas data di hampir semua kasus karena data kontrol-pesawat yang disuntikkan selalu insidental terhadap penarikan atau penulisan data. Selain itu, injeksi kode seringkali dapat mengakibatkan pelaksanaan kode sewenang -wenang.</p></li><li><p>Non-repudiasi: Sembunyikan Kegiatan: Seringkali tindakan yang dilakukan oleh kode kontrol yang disuntikkan tidak diaktifkan.</p></li><li><p>Integritas: Modifikasi Data Aplikasi: Komunikasi antara komponen dapat dimodifikasi dengan cara yang tidak terduga. Perintah yang tidak terduga dapat dieksekusi, melewati mekanisme keamanan lainnya. Data yang masuk dapat disalahtafsirkan.</p></li></ul>",
        "remediation": "<p>Data yang dapat dikendalikan pengguna seharusnya tidak, jika memungkinkan, tertanam oleh aplikasi di halaman yang diberikan untuk arahan SSI. Umumnya ada cara alternatif yang lebih aman untuk mengimplementasikan fungsionalitas yang diperlukan. Jika ini dianggap tidak praktis, data harus divalidasi secara ketat. Idealnya, Anda harus menggunakan daftar putih dari nilai -nilai yang dapat diterima khusus. Hanya string alfanumerik singkat yang akan diterima tanpa adanya ini. Data tambahan apa pun, termasuk potensi SSI Metacharacter, harus dikecualikan dari input.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/09-Testing_for_XPath_Injection",
          "https://owasp.org/www-community/attacks/XPATH_Injection",
          "https://cwe.mitre.org/data/definitions/94.html"
        ],
        "locale": "en",
        "title": "XPATH injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Mirip dengan injeksi SQL, serangan injeksi XPath terjadi ketika situs web membangun kueri XPath untuk data XML menggunakan data yang disediakan oleh pengguna. Anda dapat menentukan atribut spesifik untuk dicari dan pola yang cocok, seperti di SQL. Adalah praktik umum untuk menerima semacam input dalam string kueri saat menggunakan XML untuk situs web untuk mengidentifikasi konten yang akan ditemukan dan ditampilkan di halaman. Kueri semacam itu dapat diubah untuk mengembalikan lebih banyak data daripada yang seharusnya atau bahkan menjalankan kode sisi server jika penyerang mengirimkan string XPath yang berbahaya.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Bypass Mekanisme Perlindungan: Dalam beberapa kasus, Kode Suntik Kontrol Otentikasi; Ini dapat menyebabkan kerentanan jarak jauh.</p></li><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Kode yang disuntikkan dapat mengakses sumber daya yang dicegah oleh penyerang secara langsung untuk mengakses.</p></li><li><p>Lainnya: Jalankan kode atau perintah yang tidak sah: Serangan injeksi kode dapat menyebabkan hilangnya integritas data di hampir semua kasus karena data kontrol-pesawat yang disuntikkan selalu insidental terhadap penarikan atau penulisan data. Selain itu, injeksi kode seringkali dapat mengakibatkan pelaksanaan kode sewenang -wenang.</p></li><li><p>Non-repudiasi: Sembunyikan Kegiatan: Seringkali tindakan yang dilakukan oleh kode kontrol yang disuntikkan tidak diaktifkan.</p></li></ul>",
        "remediation": "<p>Sebelum dimasukkan dalam kueri XPath (XML), input pengguna harus divalidasi secara ketat. Disarankan untuk menggunakan daftar putih yang membatasi karakter atau nilai yang akan diterima aplikasi sebagai input pengguna.</p><p>Jika whockelisting bukan pilihan, alternatif yang kurang disukai adalah menggunakan daftar hitam yang paling tidak menghilangkan karakter \"\" '/ @ = * [] (y)</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/35.html",
          "https://capec.mitre.org/data/definitions/126.html"
        ],
        "locale": "en",
        "title": "File Path Manipulation",
        "vulnType": "OWASP WSTG",
        "description": "<p>Ketika data yang dapat dikendalikan pengguna dimasukkan ke dalam file atau jalur URL yang digunakan di server untuk mengakses sumber daya lokal, yang mungkin terletak di dalam atau di luar root web, kerentanan manipulasi jalur file dibuat. Jika jalur file rentan, penyerang dapat mengubahnya untuk mengakses sumber daya yang berbeda.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca file atau direktori: Penyerang dapat membaca data rahasia jika mereka dapat mengontrol referensi sumber daya.</p></li><li><p>Integritas: Modifikasi file atau direktori: Penyerang dapat memodifikasi data sensitif, baik dengan menulis data langsung ke penyimpanan data yang tidak dibatasi dengan baik, atau dengan mengakses fungsionalitas istimewa yang tidak dilindungi dan tidak cukup untuk menulis data.</p></li></ul>",
        "remediation": "<p>Percaya bahwa semua input adalah penggunaan berbahaya daftar input yang sangat sesuai dengan spesifikasi sebagai bagian dari strategi validasi input yang \"terima baik\". Input apa pun yang tidak sepenuhnya mematuhi spesifikasi harus ditolak atau diubah. Gunakan daftar putih ketat yang membatasi set karakter yang dapat digunakan saat memvalidasi nama file. Untuk mencegah kerentanan seperti CWE-23, hanya izinkan satu \".\" Karakter dalam nama file, dan menjaga pemisah direktori seperti \"/\" out.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/73.html"
        ],
        "locale": "en",
        "title": "External Control of Filename",
        "vulnType": "OWASP WSTG",
        "description": "<p>Karena kerentanan, nama file yang digunakan oleh sistem file dapat diubah atau dikendalikan oleh input pengguna. Penyerang dapat membuat paket yang mengubah ekstensi yang dapat diunduh file zip.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Modifikasi file atau direktori: Aplikasi dapat beroperasi pada file yang tidak terduga. Kerahasiaan dilanggar ketika nama file yang ditargetkan tidak dapat dibaca secara langsung oleh penyerang.</p></li><li><p>Integritas: Modifikasi file atau direktori: Aplikasi dapat beroperasi pada file yang tidak terduga. Ini dapat melanggar integritas jika nama file ditulis, atau jika nama file untuk suatu program atau bentuk lain dari kode yang dapat dieksekusi.</p></li><li><p>Ketersediaan: DOS: Kecelakaan, keluar, atau restart; DOS: Konsumsi Sumber Daya (Lainnya): Aplikasi dapat beroperasi pada file yang tidak terduga. Ketersediaan dapat dilanggar jika penyerang menentukan file yang tidak terduga yang dimodifikasi aplikasi. Ketersediaan juga dapat terpengaruh jika penyerang menentukan nama file untuk file besar, atau menunjuk ke perangkat khusus atau file yang tidak memiliki format yang diharapkan aplikasi.</p></li></ul>",
        "remediation": "<p>Percaya bahwa semua input adalah penggunaan berbahaya daftar input yang sangat sesuai dengan spesifikasi sebagai bagian dari strategi validasi input yang \"terima baik\". Input apa pun yang tidak sepenuhnya mematuhi spesifikasi harus ditolak atau diubah. Gunakan daftar putih ketat yang membatasi set karakter yang dapat digunakan saat memvalidasi nama file. Untuk mencegah kerentanan seperti CWE-23, hanya izinkan satu \".\" Karakter dalam nama file, dan simpan pemisah direktori seperti \"/\" out. Perluasan bahwa semua input adalah penggunaan berbahaya daftar input yang sepenuhnya sesuai dengan spesifikasi sebagai bagian dari strategi validasi input \"menerima yang diketahui baik\". Input apa pun yang tidak sepenuhnya mematuhi spesifikasi harus ditolak atau diubah. Gunakan daftar putih ketat yang membatasi set karakter yang dapat digunakan saat memvalidasi nama file.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_File_Inclusion",
          "https://cwe.mitre.org/data/definitions/20.html",
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11-Testing_for_Code_Injection"
        ],
        "locale": "en",
        "title": "Remote code execution (RCE) by injection of local files",
        "vulnType": "OWASP WSTG",
        "description": "<p>Memanfaatkan prosedur panggilan file yang rentan aplikasi, inklusi file lokal (LFI) adalah proses memasukkan file yang sudah ada di server. Misalnya, ketika halaman menerima input yang merupakan jalur ke file lokal, kerentanan ini bermanifestasi. Karakter yang melintasi direktori dapat disuntikkan untuk mengakses file lain di server jika entri ini tidak disanitasi dengan benar.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Jalankan kode atau perintah yang tidak sah: Kelemahan ini dapat menyebabkan paparan sumber daya atau fungsionalitas kepada aktor yang tidak diinginkan, mungkin memberikan informasi sensitif kepada penyerang atau bahkan menjalankan kode sewenang -wenang.</p></li></ul>",
        "remediation": "<p>Cara terbaik untuk menyingkirkan kerentanan inklusi file adalah dengan tidak pernah memberikan sistem/kerangka kerja file apa pun yang ada input pengguna. Jika ini tidak memungkinkan, aplikasi dapat menyimpan daftar file yang diizinkan yang mungkin disertakan halaman, dan kemudian menggunakan nomor indeks atau pengidentifikasi lain untuk mengakses file yang diinginkan. Sehingga pengguna jahat tidak dapat memanipulasi rute, permintaan apa pun yang berisi pengidentifikasi yang tidak valid harus ditolak. Disarankan untuk mematuhi rekomendasi panduan OWASP (https://cheatsheetseries.owasp.org/cheatsheets/file mengunggah cheat sheet.html) untuk praktik remediasi yang baik terhadap kerentanan inklusi file.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_File_Inclusion",
          "https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html",
          "https://cwe.mitre.org/data/definitions/20.html"
        ],
        "locale": "en",
        "title": "Remote code execution (RCE)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Serangan yang dikenal sebagai Eksekusi Kode Jarak Jauh (RCE) memberi penyerang kemampuan untuk menjalankan kode berbahaya dari jarak jauh di komputer. Kerentanan RCE dapat mengakibatkan pelaksanaan malware atau pengambilalihan lengkap mesin yang dikompromikan oleh penyerang.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Jalankan kode atau perintah yang tidak sah: Kelemahan ini dapat menyebabkan paparan sumber daya atau fungsionalitas kepada aktor yang tidak diinginkan, mungkin memberikan informasi sensitif kepada penyerang atau bahkan menjalankan kode sewenang -wenang.</p></li></ul>",
        "remediation": "<p>Batasi sumbernya, apakah itu input atau jalur terbuka yang mengarah ke aplikasi, dari mana RCE diakses.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_File_Inclusion",
          "https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html",
          "https://cwe.mitre.org/data/definitions/20.html"
        ],
        "locale": "en",
        "title": "Remote code execution (RCE) by remote file injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Proses memasukkan referensi ke file jarak jauh dari server lain melalui penggunaan prosedur panggilan file lemah yang diimplementasikan dalam aplikasi dikenal sebagai inklusi file jarak jauh (RFI). Cacat ini, misalnya, muncul ketika halaman mengunduh file dari sumber luar dan kemudian memasukkannya ke dalam aplikasi. Dimungkinkan untuk mengubah sumber daya untuk membuat permintaan terhadap yang dikendalikan oleh penyerang jika input itu tidak disanitasi dengan benar.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Jalankan kode atau perintah yang tidak sah: Kelemahan ini dapat menyebabkan paparan sumber daya atau fungsionalitas kepada aktor yang tidak diinginkan, mungkin memberikan informasi sensitif kepada penyerang atau bahkan menjalankan kode sewenang -wenang.</p></li></ul>",
        "remediation": "<p>Cara terbaik untuk menyingkirkan kerentanan inklusi file adalah dengan tidak pernah memberikan sistem/kerangka kerja file apa pun yang ada input pengguna. Jika ini tidak memungkinkan, aplikasi dapat menyimpan daftar file yang diizinkan yang mungkin disertakan halaman, dan kemudian menggunakan nomor indeks atau pengidentifikasi lain untuk mengakses file yang diinginkan. Sehingga pengguna jahat tidak dapat memanipulasi rute, permintaan apa pun yang berisi pengidentifikasi yang tidak valid harus ditolak. Disarankan untuk mematuhi rekomendasi panduan OWASP (https://cheatsheetseries.owasp.org/cheatsheets/file mengunggah cheat sheet.html) untuk praktik remediasi yang baik terhadap kerentanan inklusi file.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Authorization",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/284.html"
        ],
        "locale": "en",
        "title": "Improper access control",
        "vulnType": "OWASP WSTG",
        "description": "<p>Perangkat lunak ini tidak membatasi atau secara tidak benar membatasi akses ke sumber daya dari aktor yang tidak sah. Kontrol Akses melibatkan penggunaan beberapa mekanisme perlindungan seperti:</p><ul><li><p>Otentikasi (membuktikan identitas aktor)</p></li><li><p>Otorisasi (memastikan bahwa aktor yang diberikan dapat mengakses sumber daya)</p></li><li><p>Akuntabilitas (pelacakan kegiatan yang dilakukan)</p></li></ul><p>Ketika mekanisme apa pun tidak diterapkan atau gagal, penyerang dapat membahayakan keamanan perangkat lunak dengan mendapatkan hak istimewa, membaca informasi sensitif, melaksanakan perintah, menghindari deteksi, dll.</p><p>Ada dua perilaku berbeda yang dapat memperkenalkan kelemahan kontrol akses:</p><ul><li><p>Spesifikasi: Hak istimewa yang salah, izin, kepemilikan, dll. Secara eksplisit ditentukan untuk pengguna atau sumber daya (misalnya, mengatur file kata sandi agar terbuatkan dunia, atau memberikan kemampuan administrator kepada pengguna tamu). Tindakan ini dapat dilakukan oleh program atau administrator.</p></li><li><p>Penegakan: Mekanisme ini berisi kesalahan yang mencegahnya dari menegakkan persyaratan kontrol akses yang ditentukan dengan benar (mis., Memungkinkan pengguna untuk menentukan hak istimewa mereka sendiri, atau memungkinkan ACL yang tidak benar secara sintaksis untuk menghasilkan pengaturan yang tidak aman). Masalah ini terjadi dalam program itu sendiri, karena tidak benar -benar menegakkan kebijakan keamanan yang dimaksudkan yang ditentukan oleh administrator.</p></li></ul>",
        "observation": "<ul><li><p>Kontrol akses: Bypass Mekanisme Perlindungan: Pengendalian Akses Pemeriksaan untuk data pengguna atau fungsionalitas tertentu dapat dilewati.</p></li></ul>",
        "remediation": "<p>Arsitektur dan Desain</p><ul><li><p>Dengan sangat hati -hati mengelola pengaturan, manajemen, dan penanganan hak istimewa. Mengelola zona kepercayaan secara eksplisit dalam perangkat lunak.</p></li><li><p>Memadukan sistem untuk memiliki area \"aman\" di mana batas kepercayaan dapat ditarik secara jelas. Jangan biarkan data sensitif keluar dari batas kepercayaan dan selalu berhati -hati saat berinteraksi dengan kompartemen di luar area aman.</p></li><li><p>Pastikan bahwa kompartementalisasi yang tepat dibangun ke dalam desain sistem dan bahwa kompartementalisasi berfungsi untuk memungkinkan dan lebih lanjut memperkuat fungsi pemisahan hak istimewa. Arsitek dan desainer harus mengandalkan prinsip hak istimewa paling sedikit untuk memutuskan kapan tepat untuk menggunakan dan menjatuhkan hak istimewa sistem.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Authorization",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/284.html"
        ],
        "locale": "en",
        "title": "Remote Code Execution (RCE) by Improper Access Control",
        "vulnType": "OWASP WSTG",
        "description": "<p>Kegagalan perangkat lunak untuk memaksakan kontrol akses pada objek situs web disebut sebagai kerentanan kontrol akses yang tidak tepat. Saat mengakses layanan web, pengguna jahat dapat membahayakan keamanan perangkat lunak dan mengambil tindakan tertentu yang tidak disetujui.</p>",
        "observation": "<ul><li><p>Lainnya: Bervariasi berdasarkan konteks: Penyerang dapat mengakses fungsi apa pun yang secara tidak sengaja dapat diakses oleh sumbernya.</p></li></ul>",
        "remediation": "<p>Jangan mengizinkan pengguna anonim untuk mengakses situs web ini.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection",
          "https://portswigger.net/web-security/os-command-injection",
          "https://cwe.mitre.org/data/definitions/77.html",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "locale": "en",
        "title": "Command Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Kerentanan injeksi perintah biasanya terjadi ketika:</p><ol><li><p>Data memasuki aplikasi dari sumber yang tidak dipercaya.</p></li><li><p>Data adalah bagian dari string yang dieksekusi sebagai perintah oleh aplikasi.</p></li><li><p>Dengan mengeksekusi perintah, aplikasi memberi penyerang hak istimewa atau kemampuan yang tidak akan mereka miliki.</p></li></ol><p>Banyak protokol dan produk memiliki bahasa perintah khusus mereka sendiri. Sementara string perintah shell atau sistem operasi sering ditemukan dan ditargetkan, pengembang mungkin tidak menyadari bahwa bahasa perintah lain ini juga bisa rentan terhadap serangan.</p>",
        "observation": "<ul><li><p>Integritas: Jalankan kode atau perintah yang tidak sah: Jika pengguna jahat menyuntikkan karakter (seperti semi-kolon) yang membatasi akhir dari satu perintah dan awal yang lain, dimungkinkan untuk kemudian memasukkan perintah yang sama sekali baru dan tidak terkait yang tidak dimaksudkan untuk dieksekusi.</p></li><li><p>Kerahasiaan: Baca Data Aplikasi: Kode yang disuntikkan dapat mengakses data / file terbatas.</p></li><li><p>Kontrol Akses: Bypass Mekanisme Perlindungan: Dalam beberapa kasus, Kode Suntik Kontrol Otentikasi; Ini dapat menyebabkan kerentanan jarak jauh.</p></li><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Kode yang disuntikkan dapat mengakses sumber daya yang dicegah oleh penyerang secara langsung untuk mengakses.</p></li><li><p>Lainnya: Jalankan kode atau perintah yang tidak sah: Serangan injeksi kode dapat menyebabkan hilangnya integritas data di hampir semua kasus karena data kontrol-pesawat yang disuntikkan selalu insidental terhadap penarikan atau penulisan data. Selain itu, injeksi kode seringkali dapat mengakibatkan pelaksanaan kode sewenang -wenang.</p></li><li><p>Non-repudiasi: Sembunyikan Kegiatan: Seringkali tindakan yang dilakukan oleh kode kontrol yang disuntikkan tidak diaktifkan.</p></li></ul>",
        "remediation": "<p>Disarankan untuk membatasi kemampuan pengguna sebanyak mungkin ketika mengizinkannya untuk menjalankan perintah tertentu di server dan menilai dan mengevaluasi, pada contoh pertama, apakah benar -benar diperlukan bagi pengguna untuk dapat melakukan tindakan jenis ini, karena mereka melibatkan bahaya potensial secara inheren.</p><p>Akan tepat untuk membatasi kemampuan ini mengingat banyak bahasa memiliki fungsi bawaan untuk melaksanakan perintah di komputer, seperti fungsi sistem () dalam PHP, dan bahwa dimungkinkan untuk membatasi kemampuan penerjemah yang menjalankan aplikasi (seperti dalam kasus PHP).</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection",
          "https://cwe.mitre.org/data/definitions/644.html"
        ],
        "locale": "en",
        "title": "Injection of commands into HTTP Host headers.",
        "vulnType": "OWASP WSTG",
        "description": "<p>Server web biasanya host beberapa aplikasi web pada alamat IP yang sama, merujuk setiap aplikasi melalui host virtual. Pada permintaan HTTP yang masuk, server web biasanya mengirim permintaan ke host virtual tujuan berdasarkan nilai yang disediakan di header host. Tanpa validasi yang tepat dari nilai header, penyerang dapat menyediakan data yang tidak valid untuk menyebabkan server web:</p><ul><li><p>Kirim permintaan ke host virtual pertama dalam daftar.</p></li><li><p>Menyebabkan pengalihan ke domain yang dikendalikan oleh penyerang.</p></li><li><p>Lakukan keracunan cache web.</p></li><li><p>Memanipulasi fungsi reset kata sandi.</p></li></ul>",
        "observation": "<ul><li><p>Kontrol Akses: Jalankan kode atau perintah yang tidak sah: Kelemahan ini dapat menyebabkan paparan sumber daya atau fungsionalitas kepada aktor yang tidak diinginkan, mungkin memberikan informasi sensitif kepada penyerang atau bahkan menjalankan kode sewenang -wenang.</p></li></ul>",
        "remediation": "<p>Untuk memfilter, melarikan diri, atau menyandikan data yang tidak aman yang dikirim dari server di header respons HTTP, melakukan validasi output.</p><p>Nonaktifkan kemampuan browser klien untuk menjalankan skrip.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server-side_Template_Injection",
          "https://cwe.mitre.org/data/definitions/94.html",
          "https://portswigger.net/research/server-side-template-injection"
        ],
        "locale": "en",
        "title": "Server-Side Template Injection (SSTI)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Ketika pengguna meminta tampilan HTML, aplikasi modern menghasilkannya menggunakan mesin templat (juga dikenal sebagai \"templat\"). Fungsi bawaan bahasa pemrograman di mesin templat ini memungkinkan untuk pelaksanaan fungsi berisiko dan bahkan kode pada server yang hosting aplikasi. Dimungkinkan untuk menggunakan fungsi -fungsi tersebut untuk menjalankan kode di server jika pengguna jahat dapat menyuntikkan arahan template, dan ini kemudian diterjemahkan oleh mesin template.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Bypass Mekanisme Perlindungan: Dalam beberapa kasus, Kode Suntik Kontrol Otentikasi; Ini dapat menyebabkan kerentanan jarak jauh.</p></li><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Kode yang disuntikkan dapat mengakses sumber daya yang dicegah oleh penyerang secara langsung untuk mengakses.</p></li><li><p>Lainnya: Jalankan kode atau perintah yang tidak sah: Serangan injeksi kode dapat menyebabkan hilangnya integritas data di hampir semua kasus karena data kontrol-pesawat yang disuntikkan selalu insidental terhadap penarikan atau penulisan data. Selain itu, injeksi kode seringkali dapat mengakibatkan pelaksanaan kode sewenang -wenang.</p></li><li><p>Non-repudiasi: Sembunyikan Kegiatan: Seringkali tindakan yang dilakukan oleh kode kontrol yang disuntikkan tanpa dicatat.</p></li></ul>",
        "remediation": "<p>Pastikan Anda tidak memberikan variabel yang dapat dikendalikan pengguna ke fungsi yang membuat templat. Sanitasi input sangat penting jika diperlukan untuk mencegah karakter dari ditafsirkan.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery",
          "https://cwe.mitre.org/data/definitions/918.html"
        ],
        "locale": "en",
        "title": "Server-Side Request Forgery (SSRF)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Kerentanan SSRF (Pemalsuan Permintaan Sisi Server) muncul ketika dimungkinkan untuk mengarahkan server untuk mengirim permintaan ke domain apa pun menggunakan data input pengguna. Ketika pengguna yang membuat permintaan tidak menerima respons server, kerentanan ini mungkin menjadi \"buta.\" Tidak ada respons seperti itu yang disediakan dalam hal ini. Namun, berdasarkan waktu respons server, enumerasi mesin terdekat di jaringan dapat dilakukan.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Kode yang disuntikkan dapat mengakses data / file terbatas.</p></li><li><p>Integritas: Jalankan kode atau perintah yang tidak sah: Penyerang mungkin dapat membuat atau menimpa file kritis yang digunakan untuk menjalankan kode, seperti program atau perpustakaan.</p></li></ul>",
        "remediation": "<p>Daftar putih input yang diizinkan oleh parameter itu adalah mitigasi yang tepat untuk kerentanan ini. Dengan kata lain, hanya menerima jalan ke sumber daya yang sebenarnya perlu Anda akses karena, sampai sekarang, melakukan sebaliknya memberikan akses pengguna-data www ke area apa pun dari sistem izin tempat mereka dapat membaca.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/20.html"
        ],
        "locale": "en",
        "title": "JSON validation schema",
        "vulnType": "OWASP WSTG",
        "description": "<p>Kosakata yang disebut JSON Skema memungkinkan Anda untuk membuat anotasi dan memvalidasi dokumen JSON.</p><p>Anda memiliki kontrol yang lebih baik atas jenis input pengguna yang dapat disuplai dalam aplikasi Anda saat menambahkan skema ke file JSON Anda. Ketika dilakukan dengan benar, ini secara drastis mengurangi vektor penyerang.</p><p>Namun, sebagai garis pertahanan tambahan, Anda harus selalu menerapkan validasi dan penolakan input Anda sendiri. Strategi ini juga lebih disukai karena Anda juga ingin menangkal dan merekam permintaan dan masukan pengguna.</p>",
        "observation": "<ul><li><p>Ketersediaan: DOS: Konsumsi sumber daya (Memori): Penyerang dapat memberikan nilai yang tidak terduga dan menyebabkan kerusakan program atau konsumsi sumber daya yang berlebihan, seperti memori dan CPU.</p></li><li><p>Kerahasiaan: Baca file atau direktori: Penyerang dapat membaca data rahasia jika mereka dapat mengontrol referensi sumber daya.</p></li><li><p>Ketersediaan: Jalankan kode atau perintah yang tidak sah: Penyerang dapat menggunakan input berbahaya untuk memodifikasi data atau mungkin mengubah aliran kontrol dengan cara yang tidak terduga, termasuk eksekusi perintah sewenang -wenang.</p></li></ul>",
        "remediation": "<p>Untuk memastikan permintaan JSON yang diformat dengan benar, konfirmasikan bahwa validasi skema JSON terjadi. Selanjutnya, validasi setiap bidang input sebelum pemrosesan data dilakukan.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/20.html"
        ],
        "locale": "en",
        "title": "XML schema (XSD)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Anda memiliki kontrol yang lebih baik atas jenis input pengguna yang dapat disediakan di aplikasi Anda saat menambahkan skema ke file XML Anda. Ketika dilakukan dengan benar, ini secara drastis mengurangi vektor penyerang. Namun, sebagai garis pertahanan tambahan, Anda harus selalu menerapkan validasi dan penolakan input Anda sendiri. Strategi ini juga lebih disukai karena Anda juga ingin menangkal dan merekam permintaan dan masukan pengguna.</p>",
        "observation": "<ul><li><p>Ketersediaan: DOS: Konsumsi sumber daya (Memori): Penyerang dapat memberikan nilai yang tidak terduga dan menyebabkan kerusakan program atau konsumsi sumber daya yang berlebihan, seperti memori dan CPU.</p></li><li><p>Kerahasiaan: Baca file atau direktori: Penyerang dapat membaca data rahasia jika mereka dapat mengontrol referensi sumber daya.</p></li><li><p>Ketersediaan: Jalankan kode atau perintah yang tidak sah: Penyerang dapat menggunakan input berbahaya untuk memodifikasi data atau mungkin mengubah aliran kontrol dengan cara yang tidak terduga, termasuk eksekusi perintah sewenang -wenang.</p></li></ul>",
        "remediation": "<p>Periksa bahwa skema XSD divalidasi untuk memastikan bahwa dokumen XML diformat dengan benar, dan kemudian memvalidasi setiap bidang input sebelum data diproses.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:L",
    "category": "Input Validation",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/20.html"
        ],
        "locale": "en",
        "title": "Verify that structured data is strongly typed and validated",
        "vulnType": "OWASP WSTG",
        "description": "<p>Ketika data terstruktur diketik dengan ketat dan diperiksa terhadap skema yang ditentukan, aplikasi proaktif yang dapat dipertahankan dapat dibuat. Dengan menggunakan skema yang ditentukan, aplikasi sekarang dapat mengukur segala sesuatu yang berada di luar operasi yang dimaksud dan harus digunakan untuk menolak input jika skema memeriksa kembali false.</p>",
        "observation": "<ul><li><p>Ketersediaan: DOS: Konsumsi sumber daya (Memori): Penyerang dapat memberikan nilai yang tidak terduga dan menyebabkan kerusakan program atau konsumsi sumber daya yang berlebihan, seperti memori dan CPU.</p></li><li><p>Kerahasiaan: Baca file atau direktori: Penyerang dapat membaca data rahasia jika mereka dapat mengontrol referensi sumber daya.</p></li><li><p>Ketersediaan: Jalankan kode atau perintah yang tidak sah: Penyerang dapat menggunakan input berbahaya untuk memodifikasi data atau mungkin mengubah aliran kontrol dengan cara yang tidak terduga, termasuk eksekusi perintah sewenang -wenang.</p></li></ul>",
        "remediation": "<p>Periksa bahwa data terstruktur sangat diketik dan divalidasi terhadap skema yang ditentukan, termasuk karakter, panjang, dan pola yang diizinkan (misalnya, nomor kartu kredit atau nomor telepon, atau memvalidasi bahwa dua bidang terkait logis, seperti memvalidasi pinggiran kota dan zip atau pos kode pos).</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "category": "Error handling",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling"
        ],
        "locale": "en",
        "title": "Disclosure of sensitive information due to improper handling of application errors.",
        "vulnType": "OWASP WSTG",
        "description": "<p>Kesalahan verbose yang tidak dikendalikan dengan benar sering mengakibatkan tanggapan yang memberi tahu pengguna arsitektur internal aplikasi. Versi perangkat lunak atau informasi basis data yang diinstal adalah beberapa contoh data yang dapat diambil dengan cara ini.</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Penyerang mendapatkan informasi dari respons pesan kesalahan</p></li></ul>",
        "remediation": "<p>Untuk menghentikan aplikasi dari menampilkan informasi sensitif dari infrastruktur atau database Anda, terapkan sistem pengalihan yang tepat untuk mengamankan halaman atau teks generik dalam respons.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "category": "Functionality/Business Logic",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/06-Testing_for_the_Circumvention_of_Work_Flows"
        ],
        "locale": "en",
        "title": "Abuse of application logic workflow.",
        "vulnType": "OWASP WSTG",
        "description": "<p>Kerentanan alur kerja melibatkan segala jenis kerentanan yang memungkinkan penyerang menyalahgunakan aplikasi/sistem dengan cara yang memungkinkan mereka untuk memotong (tidak mengikuti) alur kerja yang dirancang/dimaksudkan.</p><p>Definisi alur kerja di Wikipedia:</p><p>Alur kerja terdiri dari urutan langkah -langkah yang terhubung di mana setiap langkah mengikuti tanpa penundaan atau celah, berakhir tepat sebelum langkah berikutnya dapat dimulai. Ini adalah representasi dari urutan operasi, yang dinyatakan sebagai pekerjaan seseorang atau kelompok, organisasi personel, atau satu atau lebih mekanisme sederhana atau kompleks. Alur kerja dapat dianggap sebagai abstraksi dari pekerjaan yang sebenarnya.</p><p>Logika bisnis aplikasi harus mengharuskan pengguna untuk menyelesaikan langkah -langkah spesifik dalam urutan yang benar/spesifik dan jika alur kerja diakhiri tanpa berhasil menyelesaikannya, semua tindakan dan tindakan yang dihasilkan adalah \"\" digulung kembali \"\" atau dibatalkan. Kerentanan yang terkait dengan penambahan alur kerja dari logika bisnis yang benar adalah unik karena mereka sangat spesifik/sistem, kasus penyalahgunaan manual yang cermat harus dikembangkan dengan menggunakan persyaratan. dan menggunakan kasus.</p><p>Proses bisnis aplikasi harus memiliki cek untuk memastikan bahwa transaksi/tindakan pengguna berlanjut dalam urutan yang benar/dapat diterima dan jika suatu transaksi memicu beberapa jenis tindakan, tindakan itu akan \"digulung kembali\" \"dan dibunuh jika transaksi tidak berhasil.</p>",
        "observation": "<ul><li><p>Lainnya: Ubah Logika Eksekusi: Penyerang dapat menyebabkan perangkat lunak melewatkan langkah -langkah kritis atau melakukannya dalam urutan yang salah, melewati logika bisnis yang dimaksud. Ini terkadang dapat memiliki implikasi keamanan.</p></li></ul>",
        "remediation": "<p>Aplikasi membutuhkan kontrol yang memastikan pengguna menyelesaikan setiap langkah alur kerja dalam urutan yang tepat dan menghentikan penyerang untuk melewati, melewatkan, atau memutar ulang langkah atau proses apa pun dalam alur kerja. Itu juga harus sadar diri. Membuat Penyalahgunaan Logika Bisnis atau Kasus Penyalahgunaan Dengan Tujuan Berhasil Menyelesaikan Proses Bisnis Sambil tidak menyelesaikan langkah -langkah yang benar dalam urutan yang benar adalah bagaimana pengujian kerentanan alur kerja dilakukan.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Functionality/Business Logic",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files.html",
          "https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html"
        ],
        "locale": "en",
        "title": "Insecure validation in file upload functionality",
        "vulnType": "OWASP WSTG",
        "description": "<p>Banyak aplikasi memungkinkan pengguna untuk mengunggah data ke proses bisnis mereka. Meskipun validasi input untuk bidang input berbasis teks dipahami secara luas, menerima file membuatnya lebih menantang untuk diimplementasikan. Terlepas dari kenyataan bahwa banyak situs web menggunakan batasan langsung berdasarkan daftar ekstensi yang diizinkan (atau diblokir), ini tidak cukup untuk menghentikan penyerang dari memuat jenis file yang aman dengan konten berbahaya.</p>",
        "observation": "<ul><li><p>Ketersediaan: Jalankan kode atau perintah yang tidak sah: Eksekusi kode sewenang -wenang dimungkinkan jika file yang diunggah ditafsirkan dan dieksekusi sebagai kode oleh penerima. Ini terutama berlaku untuk ekstensi .asp dan .php yang diunggah ke server web karena jenis file ini sering diperlakukan sebagai dapat dieksekusi secara otomatis, bahkan ketika izin sistem file tidak menentukan eksekusi. Misalnya, di lingkungan UNIX, program biasanya tidak dapat berjalan kecuali bit yang dijalankan ditetapkan, tetapi program PHP dapat dieksekusi oleh server web tanpa langsung memohonnya pada sistem operasi.</p></li></ul>",
        "remediation": "<p>Kontrol jenis file yang dikirim ke aplikasi dengan benar. Periksa jenis file, memperhatikan ekstensi dan konten.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "category": "Functionality/Business Logic",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/01-Test_Business_Logic_Data_Validation",
          "https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html",
          "https://cwe.mitre.org/data/definitions/502.html"
        ],
        "locale": "en",
        "title": "Insecure deserialization",
        "vulnType": "OWASP WSTG",
        "description": "<p>Seringkali nyaman untuk membuat serialisasi objek untuk komunikasi atau menyimpannya untuk digunakan nanti. Namun, kode atau data yang deserialisasi sering kali dapat dimodifikasi tanpa menggunakan fungsi akses yang disediakan jika mereka tidak menggunakan kriptografi untuk melindungi diri mereka sendiri. Juga, crypto apa pun masih akan menjadi keamanan sisi klien, yang merupakan asumsi keamanan yang berbahaya.</p><p>Data yang tidak dipercaya tidak dapat dipercaya untuk dibentuk dengan baik. Ketika pengembang tidak membatasi \"rantai gadget\" \", atau serangkaian instance dan doa metode yang dapat mengeksekusi secara otomatis selama proses deserialisasi (mis. Sebelum objek dikembalikan ke penelepon), mereka kadang-kadang dapat dieksploitasi oleh penyerang untuk melakukan tindakan yang tidak sah, seperti menghasilkan shell.</p><p>Serialisasi dan deserialisasi merujuk pada proses mengambil data yang terkait dengan objek internal program, mengemasnya dengan cara yang memungkinkan data disimpan atau ditransfer secara eksternal (\"\" serialisasi \"\"), dan kemudian mengekstraksi data serial untuk merekonstruksi objek. Asli (\"\" Deserialization \"\").</p>",
        "observation": "<ul><li><p>Integritas: Keadaan Tak Terduga: Penyerang dapat memodifikasi objek atau data yang tidak terduga yang dianggap aman dari modifikasi.</p></li><li><p>Ketersediaan: DOS: Konsumsi Sumber Daya (CPU): Jika suatu fungsi membuat asumsi tentang kapan harus diakhiri, berdasarkan seorang penjaga dalam suatu string, ia dapat dengan mudah tidak pernah berakhir.</p></li><li><p>Lainnya: Bervariasi berdasarkan Konteks: Konsekuensinya dapat sangat bervariasi, karena tergantung pada objek atau metode mana yang sedang de-serialized, dan bagaimana mereka digunakan. Membuat asumsi bahwa kode dalam objek de-serialized valid berbahaya dan dapat memungkinkan eksploitasi.</p></li></ul>",
        "remediation": "<p>Kemungkinan mitigasi untuk berbagai fase proses pembuatan aplikasi dijelaskan di bawah ini:</p><ul><li><p>Fase: Arsitektur dan Desain; pelaksanaan. Jika tersedia, gunakan fitur penandatanganan/penyegelan bahasa pemrograman untuk memastikan bahwa data deserialized belum ternoda. Misalnya, kode otentikasi pesan berbasis hash (HMAC) dapat digunakan untuk memastikan bahwa data belum dimodifikasi.</p></li><li><p>Fase: Implementasi. Saat menghapus data, disarankan untuk mengisi objek baru daripada hanya deserialize. Hasilnya adalah bahwa data mengalami validasi input yang aman dan fungsinya aman.</p></li><li><p>Fase: Implementasi. Secara eksplisit mendefinisikan objek akhir () untuk menghindari deserialisasi.</p></li><li><p>Fase: Arsitektur dan Desain; Pelaksanaan. Jadikan bidang sementara untuk melindunginya dari deserialisasi. Upaya untuk membuat serial dan kemudian deserialisasi kelas yang berisi bidang transien akan menghasilkan nol di mana data sementara seharusnya. Ini adalah cara yang bagus untuk mencegah variabel sementara, lingkungan, atau sensitif dari ditransfer dan disalahgunakan.</p></li><li><p>Fase: Implementasi. Hindari memiliki jenis atau gadget yang tidak perlu yang tersedia yang dapat dieksploitasi untuk tujuan jahat. Ini membatasi kemungkinan jenis dan gadget yang tidak diinginkan atau tidak sah dieksploitasi oleh penyerang. Tambahkan hanya kelas yang dapat diterima ke daftar izin. Catatan: Gadget baru terus ditemukan, jadi ini saja bukan mitigasi yang cukup.</p></li></ul>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Web client side",
    "details": [
      {
        "references": [
          "https://cwe.mitre.org/data/definitions/601.html",
          "https://portswigger.net/kb/issues/00500100_open-redirection-reflected"
        ],
        "locale": "en",
        "title": "Client-Side URL Redirect (Open Redirection)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Kerentanan yang dikenal sebagai pengalihan terbuka terjadi ketika suatu program secara tidak sengaja memasukkan data yang dapat dikendalikan pengguna ke dalam tujuan pengalihan. Dalam aplikasi, penyerang dapat membuat URL yang mengarahkan lalu lintas ke domain eksternal apa pun.</p>",
        "observation": "<ul><li><p>Kontrol Akses: Dapatkan hak istimewa atau anggap identitas: Pengguna dapat diarahkan ke halaman yang tidak dipercaya yang berisi malware yang kemudian dapat membahayakan mesin pengguna. Ini akan mengekspos pengguna terhadap risiko yang luas dan interaksi pengguna dengan server web juga dapat dikompromikan jika malware melakukan keylogging atau serangan lain yang mencuri kredensial, informasi yang dapat diidentifikasi secara pribadi (PII), atau data penting lainnya.</p></li><li><p>Lainnya: Lainnya: Pengguna dapat mengalami serangan phishing dengan dialihkan ke halaman yang tidak dipercaya. Serangan phishing mungkin menunjuk ke halaman web yang dikendalikan penyerang yang tampaknya merupakan situs web tepercaya. Phishers kemudian dapat mencuri kredensial pengguna dan kemudian menggunakan kredensial ini untuk mengakses situs web yang sah.</p></li></ul>",
        "remediation": "<p>Dengan menonaktifkan fungsi pengalihan atau menyimpan daftar sisi server dari semua URL yang diizinkan untuk pengalihan, aplikasi harus, jika memungkinkan, menghindari memasukkan data yang dapat dikendalikan pengguna ke dalam target pengalihan.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Web client side",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/03-Testing_for_HTML_Injection",
          "https://cwe.mitre.org/data/definitions/20.html"
        ],
        "locale": "en",
        "title": "HTML Content Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Suntikan HTML memungkinkan suntikan kode HTML sisi klien yang akan ditafsirkan oleh browser korban saat mengunjungi URL. Dimungkinkan untuk mengubah DOM dan, dalam beberapa keadaan, untuk menyuntikkan kode JavaScript untuk membantu mencuri data dari browser korban.</p>",
        "observation": "<ul><li><p>Ketersediaan: DOS: Konsumsi sumber daya (Memori): Penyerang dapat memberikan nilai yang tidak terduga dan menyebabkan kerusakan program atau konsumsi sumber daya yang berlebihan, seperti memori dan CPU.</p></li><li><p>Kerahasiaan: Baca file atau direktori: Penyerang dapat membaca data rahasia jika mereka dapat mengontrol referensi sumber daya.</p></li><li><p>Ketersediaan: Jalankan kode atau perintah yang tidak sah: Penyerang dapat menggunakan input berbahaya untuk memodifikasi data atau mungkin mengubah aliran kontrol dengan cara yang tidak terduga, termasuk eksekusi perintah sewenang -wenang.</p></li></ul>",
        "remediation": "<p>Serangan semacam ini dapat dihentikan dengan membersihkan input pengguna dengan benar atau dengan benar memvalidasi konten yang diterima dan dikirim server.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "category": "Web client side",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/05-Testing_for_CSS_Injection",
          "https://research.securitum.com/css-data-exfiltration-in-firefox-via-single-injection-point/",
          "https://cwe.mitre.org/data/definitions/20.html"
        ],
        "locale": "en",
        "title": "CSS Content Injection",
        "vulnType": "OWASP WSTG",
        "description": "<p>Mirip dengan cara kerja suntikan HTML atau XSS, suntikan CSS memberi peretas kemampuan untuk memasukkan kode CSS di sisi klien, yang kemudian akan ditafsirkan oleh browser korban ketika mereka mengunjungi URL. Telah ditunjukkan bahwa dimungkinkan untuk mengeluarkan data dari DOM hanya menggunakan CSS, terlepas dari kenyataan bahwa CSS tidak memiliki potensi yang sama dengan HTML atau JavaScript dan hanya mampu mengekspor gaya.</p>",
        "observation": "<ul><li><p>Ketersediaan: DOS: Konsumsi sumber daya (Memori): Penyerang dapat memberikan nilai yang tidak terduga dan menyebabkan kerusakan program atau konsumsi sumber daya yang berlebihan, seperti memori dan CPU.</p></li><li><p>Kerahasiaan: Baca file atau direktori: Penyerang dapat membaca data rahasia jika mereka dapat mengontrol referensi sumber daya.</p></li><li><p>Ketersediaan: Jalankan kode atau perintah yang tidak sah: Penyerang dapat menggunakan input berbahaya untuk memodifikasi data atau mungkin mengubah aliran kontrol dengan cara yang tidak terduga, termasuk eksekusi perintah sewenang -wenang.</p></li></ul>",
        "remediation": "<p>Serangan semacam ini dapat dihentikan dengan memvalidasi konten yang diterima dan dikirim dengan benar, atau dengan benar membersihkan input pengguna.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Web client side",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "locale": "en",
        "title": "DOM based Cross-Site Scripting (XSS)",
        "vulnType": "OWASP WSTG",
        "description": "<p>Serangan XSS yang dikenal sebagai XSS berbasis DOM menyebabkan kode sisi klien berjalan dengan cara yang \"tidak terduga\" dengan mengubah \"lingkungan\" DOM yang dirancang oleh browser korban oleh skrip sisi klien asli. Sebagai hasil dari perubahan berbahaya yang dilakukan pada lingkungan DOM, kode sisi klien yang terkandung dalam halaman dieksekusi secara berbeda meskipun halaman itu sendiri (mis., Respons HTTP) tetap sama.</p><p>Serangan XSS lainnya (disimpan atau dipantulkan), sebaliknya, menempatkan muatan serangan pada halaman respons (karena kegagalan sisi server).</p>",
        "observation": "<ul><li><p>Kerahasiaan: Baca Data Aplikasi: Serangan paling umum dilakukan dengan skrip lintas situs melibatkan pengungkapan informasi yang disimpan dalam cookie pengguna. Biasanya, pengguna jahat akan membuat skrip sisi klien, yang-ketika diuraikan oleh browser web-melakukan beberapa aktivitas (seperti mengirim semua cookie situs ke alamat email yang diberikan). Skrip ini akan dimuat dan dijalankan oleh setiap pengguna yang mengunjungi situs web. Karena situs yang meminta untuk menjalankan skrip memiliki akses ke cookie yang dimaksud, skrip jahat juga.</p></li><li><p>Ketersediaan: Jalankan kode atau perintah yang tidak sah: Dalam beberapa keadaan, dimungkinkan untuk menjalankan kode sewenang-wenang pada komputer korban ketika skrip lintas situs dikombinasikan dengan kekurangan lainnya.</p></li><li><p>Kontrol Akses: Baca Data Aplikasi: Konsekuensi dari serangan XSS adalah sama terlepas dari apakah itu disimpan atau tercermin. Perbedaannya adalah bagaimana muatan tiba di server. XSS dapat menyebabkan berbagai masalah bagi pengguna akhir yang berkisar tingkat keparahan dari gangguan untuk menyelesaikan kompromi akun. Beberapa kerentanan skrip lintas situs dapat dieksploitasi untuk memanipulasi atau mencuri cookie, membuat permintaan yang dapat disalahartikan bagi orang-orang dari pengguna yang valid, kompromi informasi rahasia, atau menjalankan kode berbahaya pada sistem pengguna akhir untuk berbagai keperluan jahat. Serangan kerusakan lainnya termasuk pengungkapan file pengguna akhir, instalasi program kuda Trojan, mengarahkan kembali pengguna ke beberapa halaman atau situs lain, menjalankan kontrol \"aktif X\" (di bawah Microsoft Internet Explorer) dari situs yang menurut pengguna dapat dipercaya, dan memodifikasi presentasi konten.</p></li></ul>",
        "remediation": "<p>Tidak ada tindakan tunggal yang sepenuhnya dapat menghilangkan ancaman serangan berbasis DOM. Namun, secara umum, cara paling efektif untuk mencegah kerentanan berbasis DOM adalah dengan mencegah data dari sumber apa pun yang tidak dipercaya untuk mengubah nilai yang diteruskan ke penerima mana pun.</p><p>Jika fungsionalitas aplikasi yang diinginkan berarti bahwa perilaku ini tidak dapat dihindari, maka pertahanan harus diimplementasikan dalam kode sisi klien. Dalam banyak kasus, data yang relevan dapat divalidasi terhadap daftar putih, hanya memungkinkan konten yang diketahui aman. Dalam kasus lain, perlu untuk membersihkan atau mengenkripsi data. Ini bisa menjadi tugas yang kompleks dan, tergantung pada konteks di mana data harus dimasukkan, dapat melibatkan kombinasi dari JavaScript yang melarikan diri, pengkodean HTML, dan pengkodean URL, dalam urutan yang sesuai.</p>"
      }
    ]
  },
  {
    "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "category": "Web client side",
    "details": [
      {
        "references": [
          "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing",
          "https://cwe.mitre.org/data/definitions/942.html",
          "https://developer.mozilla.org/es/docs/Web/HTTP/CORS",
          "https://stackoverflow.com/questions/1653308/access-control-allow-origin-multiple-origin-domains"
        ],
        "locale": "en",
        "title": "Cross-Origin Resource Sharing (CORS) missconfiguration",
        "vulnType": "OWASP WSTG",
        "description": "<p>CORS adalah singkatan dari Cross-Origin Resource Sharing. Ini adalah fitur yang menawarkan kemungkinan untuk:- aplikasi web untuk mengekspos sumber daya ke semua atau domain terbatas.- Klien web untuk membuat permintaan AJAX untuk sumber daya pada domain lain daripada domain sumbernya. Kebijakan CORS tidak membatasi dapat disalahgunakan dalam beberapa cara yang dapat mengambil risiko kerahasiaan, ketersediaan, dan informasi integritas pengguna.</p>",
        "observation": "<ul><li><p>Lainnya: Bervariasi berdasarkan konteks: Penyerang dapat mengakses fungsi apa pun yang secara tidak sengaja dapat diakses oleh sumbernya.</p></li></ul>",
        "remediation": "<p>Hanya izinkan domain atau subdomain tepercaya yang harus dipercayai oleh aplikasi tersebut pada header origin-control-control-wallow-origin.</p>"
      }
    ]
  }
]